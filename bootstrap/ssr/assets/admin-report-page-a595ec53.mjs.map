{"version":3,"file":"admin-report-page-a595ec53.mjs","sources":["../../../common/resources/client/admin/analytics/use-admin-report.ts","../../../common/resources/client/charts/chart-layout.tsx","../../../common/resources/client/charts/chart-loading-indicator.tsx","../../../common/resources/client/charts/base-chart.tsx","../../../common/resources/client/charts/data/format-report-data.ts","../../../common/resources/client/charts/chart-colors.tsx","../../../common/resources/client/charts/line-chart.tsx","../../../common/resources/client/charts/polar-area-chart.tsx","../../../common/resources/client/charts/bar-chart.tsx","../../../common/resources/client/admin/analytics/geo-chart/use-google-geo-chart.ts","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon.tsx","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger.tsx","../../../common/resources/client/i18n/formatted-country-name.tsx","../../../common/resources/client/admin/analytics/geo-chart/geo-chart.tsx","../../../common/resources/client/admin/analytics/visitors-report-charts.tsx","../../../common/resources/client/admin/analytics/admin-header-report.tsx","../../../common/resources/client/admin/analytics/report-date-selector.tsx","../../../common/resources/client/admin/analytics/admin-report-page.tsx"],"sourcesContent":["import {keepPreviousData, useQuery} from '@tanstack/react-query';\r\nimport {BackendResponse} from '../../http/backend-response/backend-response';\r\nimport {apiClient} from '../../http/query-client';\r\nimport {VisitorsReportData} from './visitors-report-data';\r\nimport {IconTree} from '../../icons/create-svg-icon';\r\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {ReactElement} from 'react';\r\nimport {SvgIconProps} from '@common/icons/svg-icon';\r\n\r\nconst Endpoint = 'admin/reports';\r\n\r\nexport interface HeaderDatum {\r\n  icon: IconTree[] | ReactElement<SvgIconProps>;\r\n  name: string;\r\n  type?: 'number' | 'fileSize' | 'percentage';\r\n  currentValue: number;\r\n  previousValue?: number;\r\n  percentageChange?: number;\r\n}\r\n\r\ninterface FetchAnalyticsReportResponse extends BackendResponse {\r\n  visitorsReport: VisitorsReportData;\r\n  headerReport: HeaderDatum[];\r\n}\r\n\r\ninterface Payload {\r\n  types?: ('visitors' | 'header')[];\r\n  dateRange?: DateRangeValue;\r\n}\r\nexport function useAdminReport(payload: Payload = {}) {\r\n  return useQuery({\r\n    queryKey: [Endpoint, payload],\r\n    queryFn: () => fetchAnalyticsReport(payload),\r\n    placeholderData: keepPreviousData,\r\n  });\r\n}\r\n\r\nfunction fetchAnalyticsReport({\r\n  types,\r\n  dateRange,\r\n}: Payload): Promise<FetchAnalyticsReportResponse> {\r\n  const params: Record<string, any> = {};\r\n  if (types) {\r\n    params.types = types.join(',');\r\n  }\r\n  if (dateRange) {\r\n    params.startDate = dateRange.start.toAbsoluteString();\r\n    params.endDate = dateRange.end.toAbsoluteString();\r\n    params.timezone = dateRange.start.timeZone;\r\n  }\r\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\r\n}\r\n","import {ReactNode, Ref} from 'react';\r\nimport clsx from 'clsx';\r\n\r\nexport interface ChartLayoutProps {\r\n  title: ReactNode;\r\n  description?: ReactNode;\r\n  className?: string;\r\n  children: ReactNode;\r\n  contentIsFlex?: boolean;\r\n  contentClassName?: string;\r\n  minHeight?: string;\r\n  contentRef?: Ref<HTMLDivElement>;\r\n  isLoading?: boolean;\r\n}\r\nexport function ChartLayout(props: ChartLayoutProps) {\r\n  const {\r\n    title,\r\n    description,\r\n    children,\r\n    className,\r\n    contentIsFlex = true,\r\n    contentClassName,\r\n    contentRef,\r\n    minHeight = 'min-h-440',\r\n  } = props;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        'rounded-panel flex h-full flex-auto flex-col border bg',\r\n        minHeight,\r\n        className,\r\n      )}\r\n    >\r\n      <div className=\"flex flex-shrink-0 items-center justify-between p-14 text-xs\">\r\n        <div className=\"text-sm font-semibold\">{title}</div>\r\n        {description && <div className=\"text-muted\">{description}</div>}\r\n      </div>\r\n      <div\r\n        ref={contentRef}\r\n        className={clsx(\r\n          'relative p-14',\r\n          contentIsFlex && 'flex flex-auto items-center justify-center',\r\n          contentClassName,\r\n        )}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {ProgressCircle} from '@common/ui/progress/progress-circle';\r\nimport {Trans} from '@common/i18n/trans';\r\n\r\nexport function ChartLoadingIndicator() {\r\n  return (\r\n    <div className=\"flex items-center gap-10 text-sm absolute mx-auto\">\r\n      <ProgressCircle isIndeterminate size=\"sm\" />\r\n      <Trans message=\"Chart loading\" />\r\n    </div>\r\n  );\r\n}\r\n","import type {ChartData, ChartOptions, ChartType} from 'chart.js';\r\nimport {lazy, Suspense} from 'react';\r\nimport {ChartLayout, ChartLayoutProps} from './chart-layout';\r\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\r\n\r\nconst LazyChart = lazy(() => import('./lazy-chart'));\r\n\r\nexport interface BaseChartProps<Type extends ChartType = ChartType>\r\n  extends Omit<ChartLayoutProps, 'children'> {\r\n  type: Type;\r\n  data: ChartData<Type, unknown>;\r\n  options?: ChartOptions<Type>;\r\n  hideLegend?: boolean;\r\n}\r\nexport function BaseChart<Type extends ChartType = ChartType>(\r\n  props: BaseChartProps<Type>\r\n) {\r\n  const {title, description, className, contentRef, isLoading} = props;\r\n\r\n  return (\r\n    <ChartLayout\r\n      title={title}\r\n      description={description}\r\n      className={className}\r\n      contentRef={contentRef}\r\n    >\r\n      <Suspense fallback={<ChartLoadingIndicator />}>\r\n        <LazyChart {...props} />\r\n        {isLoading && <ChartLoadingIndicator />}\r\n      </Suspense>\r\n    </ChartLayout>\r\n  );\r\n}\r\n","import {DateFormatter, parseAbsoluteToLocal} from '@internationalized/date';\r\nimport memoize from 'nano-memoize';\r\nimport {ChartType} from 'chart.js';\r\nimport {\r\n  FormattedDatasetItem,\r\n  FormattedReportData,\r\n} from './formatted-dataset-item';\r\nimport {\r\n  DatasetItem,\r\n  RangedDatasetGranularity,\r\n  ReportMetric,\r\n} from '../../admin/analytics/report-metric';\r\nimport {shallowEqual} from '../../utils/shallow-equal';\r\n\r\ninterface Options {\r\n  localeCode: string;\r\n  shareFirstDatasetLabels?: boolean;\r\n}\r\n\r\ntype FormattedDatasetLabels = Omit<FormattedDatasetItem, 'value'>;\r\n\r\nexport function formatReportData(\r\n  report: ReportMetric<DatasetItem> | undefined,\r\n  {localeCode = 'en', shareFirstDatasetLabels = true}: Options,\r\n): FormattedReportData {\r\n  if (!report) return {datasets: []};\r\n\r\n  const firstDatasetLabels: FormattedDatasetLabels[] = [];\r\n\r\n  return {\r\n    ...report,\r\n    datasets: report.datasets.map((dataset, datasetIndex) => {\r\n      const data = dataset.data.map((datasetItem, itemIndex) => {\r\n        let label: FormattedDatasetLabels;\r\n        // when there are multiple datasets, we'll need to use labels from the first dataset, so charts are\r\n        // overlapped over one another, otherwise they will be side by side, if labels in all datasets are not identical.\r\n        if (datasetIndex === 0 || !shareFirstDatasetLabels) {\r\n          label = generateDatasetLabels(\r\n            datasetItem,\r\n            report.granularity,\r\n            localeCode,\r\n          );\r\n          firstDatasetLabels[itemIndex] = label;\r\n        } else {\r\n          label = firstDatasetLabels[itemIndex];\r\n        }\r\n        return {\r\n          ...label,\r\n          value: datasetItem.value,\r\n        };\r\n      });\r\n\r\n      return {...dataset, data};\r\n    }),\r\n  };\r\n}\r\n\r\nfunction generateDatasetLabels<T extends ChartType = ChartType>(\r\n  datum: DatasetItem,\r\n  granularity: RangedDatasetGranularity | undefined,\r\n  locale: string,\r\n): FormattedDatasetLabels {\r\n  if (datum.label) {\r\n    return {label: datum.label};\r\n  }\r\n\r\n  if (!datum.date) {\r\n    return {label: ''};\r\n  }\r\n\r\n  return generateTimeLabels(datum, granularity, locale);\r\n}\r\n\r\nfunction generateTimeLabels(\r\n  {date: isoDate, endDate: isoEndDate}: DatasetItem,\r\n  granularity: RangedDatasetGranularity | undefined = 'day',\r\n  locale: string,\r\n): Omit<FormattedDatasetItem, 'value'> {\r\n  const date = parseAbsoluteToLocal(isoDate!).toDate();\r\n  const endDate = isoEndDate ? parseAbsoluteToLocal(isoEndDate).toDate() : null;\r\n\r\n  switch (granularity) {\r\n    case 'minute':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          second: '2-digit',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          second: '2-digit',\r\n        }).format(date),\r\n      };\r\n    case 'hour':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          month: 'short',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        }).format(date),\r\n      };\r\n    case 'day':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          day: '2-digit',\r\n          weekday: 'short',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          weekday: 'short',\r\n          month: 'short',\r\n        }).format(date),\r\n      };\r\n    case 'week':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          month: 'short',\r\n          day: '2-digit',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          month: 'long',\r\n          year: 'numeric',\r\n        }).formatRange(date, endDate as Date),\r\n      };\r\n    case 'month':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          month: 'short',\r\n          year: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          month: 'long',\r\n          year: 'numeric',\r\n        }).format(date),\r\n      };\r\n    case 'year':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          year: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          year: 'numeric',\r\n        }).format(date),\r\n      };\r\n  }\r\n}\r\n\r\nconst getFormatter = memoize(\r\n  (locale, options: Intl.DateTimeFormatOptions) => {\r\n    return new DateFormatter(locale, options);\r\n  },\r\n  {\r\n    equals: (a, b) => {\r\n      return shallowEqual(a, b);\r\n    },\r\n    callTimeout: undefined as any,\r\n  },\r\n);\r\n","import {getBootstrapData} from '@common/core/bootstrap-data/use-backend-bootstrap-data';\r\n\r\nconst primaryColor = getBootstrapData().themes.all[0].values['--be-primary'];\r\nexport const ChartColors = [\r\n  [\r\n    `rgb(${primaryColor.replaceAll(' ', ',')})`,\r\n    `rgba(${primaryColor.replaceAll(' ', ',')},0.2)`,\r\n  ],\r\n  ['rgb(255,112,67)', 'rgb(255,112,67,0.2)'],\r\n  ['rgb(255,167,38)', 'rgb(255,167,38,0.2)'],\r\n  ['rgb(141,110,99)', 'rgb(141,110,99,0.2)'],\r\n  ['rgb(102,187,106)', 'rgba(102,187,106,0.2)'],\r\n  ['rgb(92,107,192)', 'rgb(92,107,192,0.2)'],\r\n];\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {useSelectedLocale} from '../i18n/selected-locale';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport clsx from 'clsx';\r\n\r\nconst LineChartOptions: ChartOptions<'line'> = {\r\n  parsing: {\r\n    xAxisKey: 'label',\r\n    yAxisKey: 'value',\r\n  },\r\n  datasets: {\r\n    line: {\r\n      fill: 'origin',\r\n      tension: 0.1,\r\n      pointBorderWidth: 4,\r\n      pointHitRadius: 10,\r\n    },\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      intersect: false,\r\n      mode: 'index',\r\n    },\r\n  },\r\n};\r\n\r\ninterface LineChartProps extends Omit<BaseChartProps<'line'>, 'type' | 'data'> {\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function LineChart({data, className, ...props}: LineChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'line', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: ChartColors[i][1],\r\n        borderColor: ChartColors[i][0],\r\n        pointBackgroundColor: ChartColors[i][0],\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode]);\r\n\r\n  return (\r\n    <BaseChart\r\n      {...props}\r\n      className={clsx(className, 'min-w-500')}\r\n      data={formattedData}\r\n      type=\"line\"\r\n      options={LineChartOptions}\r\n    />\r\n  );\r\n}\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {useSelectedLocale} from '../i18n/selected-locale';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport clsx from 'clsx';\r\n\r\nconst PolarAreaChartOptions: ChartOptions<'polarArea'> = {\r\n  parsing: {\r\n    key: 'value',\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      intersect: true,\r\n    },\r\n  },\r\n};\r\n\r\ninterface PolarAreaChartProps\r\n  extends Omit<BaseChartProps<'polarArea'>, 'type' | 'data'> {\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function PolarAreaChart({\r\n  data,\r\n  className,\r\n  ...props\r\n}: PolarAreaChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'polarArea', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.labels = formattedData.datasets[0]?.data.map(d => d.label);\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: ChartColors.map(c => c[1]),\r\n        borderColor: ChartColors.map(c => c[0]),\r\n        borderWidth: 2,\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode]);\r\n\r\n  return (\r\n    <BaseChart\r\n      type=\"polarArea\"\r\n      data={formattedData}\r\n      options={PolarAreaChartOptions}\r\n      className={clsx(className, 'min-w-500')}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {useSelectedLocale} from '../i18n/selected-locale';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport clsx from 'clsx';\r\n\r\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\r\n  direction?: 'horizontal' | 'vertical';\r\n  individualBarColors?: boolean;\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function BarChart({\r\n  data,\r\n  direction = 'vertical',\r\n  individualBarColors = false,\r\n  className,\r\n  ...props\r\n}: BarChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: individualBarColors\r\n          ? ChartColors.map(c => c[1])\r\n          : ChartColors[i][1],\r\n        borderColor: individualBarColors\r\n          ? ChartColors.map(c => c[0])\r\n          : ChartColors[i][0],\r\n        borderWidth: 2,\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode, individualBarColors]);\r\n\r\n  const isHorizontal = direction === 'horizontal';\r\n  const options: ChartOptions<'bar'> = useMemo(() => {\r\n    return {\r\n      indexAxis: isHorizontal ? 'y' : 'x',\r\n      parsing: {\r\n        xAxisKey: isHorizontal ? 'value' : 'label',\r\n        yAxisKey: isHorizontal ? 'label' : 'value',\r\n      },\r\n    };\r\n  }, [isHorizontal]);\r\n\r\n  return (\r\n    <BaseChart\r\n      type=\"bar\"\r\n      className={clsx(className, 'min-w-500')}\r\n      data={formattedData}\r\n      options={options}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import lazyLoader from '../../../utils/http/lazy-loader';\r\nimport {useSettings} from '@common/core/settings/use-settings';\r\nimport {RefObject, useCallback, useEffect, useRef} from 'react';\r\nimport {useThemeSelector} from '@common/ui/themes/theme-selector-context';\r\nimport {themeValueToHex} from '@common/ui/themes/utils/theme-value-to-hex';\r\nimport {useTrans} from '@common/i18n/use-trans';\r\nimport {message} from '@common/i18n/message';\r\nimport {LocationDatasetItem} from '@common/admin/analytics/report-metric';\r\n\r\nconst loaderUrl = 'https://www.gstatic.com/charts/loader.js';\r\n\r\ninterface UseGoogleGeoChartProps {\r\n  placeholderRef: RefObject<HTMLDivElement>;\r\n  data: LocationDatasetItem[];\r\n  onCountrySelected?: (countryCode: string) => void;\r\n  country?: string;\r\n}\r\nexport function useGoogleGeoChart({\r\n  placeholderRef,\r\n  data,\r\n  country,\r\n  onCountrySelected,\r\n}: UseGoogleGeoChartProps) {\r\n  const {trans} = useTrans();\r\n  const {analytics} = useSettings();\r\n  const apiKey = analytics?.gchart_api_key;\r\n  const {selectedTheme} = useThemeSelector();\r\n  const geoChartRef = useRef<google.visualization.GeoChart>();\r\n  // only allow selecting countries, not cities\r\n  const regionInteractivity = !!onCountrySelected && !country;\r\n  const drawGoogleChart = useCallback(() => {\r\n    if (typeof google === 'undefined') return;\r\n\r\n    const seedData = data.map(location => [location.label, location.value]);\r\n    seedData.unshift([\r\n      country ? trans(message('City')) : trans(message('Country')),\r\n      trans(message('Clicks')),\r\n    ]);\r\n\r\n    const backgroundColor = `${themeValueToHex(\r\n      selectedTheme.values['--be-paper'],\r\n    )}`;\r\n    const chartColor = `${themeValueToHex(\r\n      selectedTheme.values['--be-primary'],\r\n    )}`;\r\n\r\n    const options: google.visualization.GeoChartOptions = {\r\n      colorAxis: {colors: [chartColor]},\r\n      backgroundColor,\r\n      region: country ? country.toUpperCase() : undefined,\r\n      resolution: country ? 'provinces' : 'countries',\r\n      displayMode: country ? 'markers' : 'regions',\r\n      enableRegionInteractivity: regionInteractivity,\r\n    };\r\n\r\n    if (\r\n      !geoChartRef.current &&\r\n      placeholderRef.current &&\r\n      google?.visualization?.GeoChart\r\n    ) {\r\n      geoChartRef.current = new google.visualization.GeoChart(\r\n        placeholderRef.current,\r\n      );\r\n    }\r\n    geoChartRef.current?.draw(\r\n      google.visualization.arrayToDataTable(seedData),\r\n      options,\r\n    );\r\n  }, [\r\n    selectedTheme,\r\n    data,\r\n    placeholderRef,\r\n    trans,\r\n    country,\r\n    regionInteractivity,\r\n  ]);\r\n\r\n  const initGoogleGeoChart = useCallback(async () => {\r\n    if (lazyLoader.isLoadingOrLoaded(loaderUrl)) return;\r\n    await lazyLoader.loadAsset(loaderUrl, {type: 'js', id: 'google-charts-js'});\r\n    await google.charts.load('current', {\r\n      packages: ['geochart'],\r\n      mapsApiKey: apiKey,\r\n    });\r\n    drawGoogleChart();\r\n  }, [apiKey, drawGoogleChart]);\r\n\r\n  useEffect(() => {\r\n    if (geoChartRef.current && onCountrySelected) {\r\n      google.visualization.events.addListener(\r\n        geoChartRef.current,\r\n        'regionClick',\r\n        (a: {region: string}) => onCountrySelected?.(a.region),\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (geoChartRef.current) {\r\n        google.visualization.events.removeAllListeners(geoChartRef.current);\r\n      }\r\n    };\r\n    // this will correctly run when geochart instance is set on ref\r\n  }, [onCountrySelected, geoChartRef.current]);\r\n\r\n  // on component load: load chart library then draw, otherwise just draw\r\n  useEffect(() => {\r\n    initGoogleGeoChart();\r\n  }, [initGoogleGeoChart]);\r\n\r\n  // redraw chart if data or theme changes\r\n  useEffect(() => {\r\n    drawGoogleChart();\r\n  }, [selectedTheme, drawGoogleChart, data]);\r\n\r\n  return {drawGoogleChart};\r\n}\r\n","import {createSvgIcon} from '@common/icons/create-svg-icon';\r\n\r\nexport const InfoDialogTriggerIcon = createSvgIcon(\r\n  <path d=\"M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />,\r\n  'InfoDialogTrigger'\r\n);\r\n","import {IconButton} from '@common/ui/buttons/icon-button';\r\nimport {InfoDialogTriggerIcon} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon';\r\nimport {Dialog, DialogSize} from '@common/ui/overlays/dialog/dialog';\r\nimport {DialogHeader} from '@common/ui/overlays/dialog/dialog-header';\r\nimport {DialogBody} from '@common/ui/overlays/dialog/dialog-body';\r\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\r\nimport React, {ReactNode} from 'react';\r\nimport clsx from 'clsx';\r\n\r\ninterface InfoDialogTriggerProps {\r\n  title?: ReactNode;\r\n  body: ReactNode;\r\n  dialogSize?: DialogSize;\r\n  className?: string;\r\n}\r\nexport function InfoDialogTrigger({\r\n  title,\r\n  body,\r\n  dialogSize = 'sm',\r\n  className,\r\n}: InfoDialogTriggerProps) {\r\n  return (\r\n    <DialogTrigger type=\"popover\" triggerOnHover>\r\n      <IconButton\r\n        className={clsx('ml-4 text-muted opacity-70', className)}\r\n        iconSize=\"xs\"\r\n        size=\"2xs\"\r\n      >\r\n        <InfoDialogTriggerIcon viewBox=\"0 0 16 16\" />\r\n      </IconButton>\r\n      <Dialog size={dialogSize}>\r\n        {title && (\r\n          <DialogHeader padding=\"px-18 pt-12\" size=\"md\" hideDismissButton>\r\n            {title}\r\n          </DialogHeader>\r\n        )}\r\n        <DialogBody>{body}</DialogBody>\r\n      </Dialog>\r\n    </DialogTrigger>\r\n  );\r\n}\r\n","import {useSelectedLocale} from '@common/i18n/selected-locale';\r\nimport {Fragment, memo} from 'react';\r\n\r\ninterface Props {\r\n  code: string;\r\n}\r\nexport const FormattedCountryName = memo(({code: countryCode}: Props) => {\r\n  const {localeCode} = useSelectedLocale();\r\n  const regionNames = new Intl.DisplayNames([localeCode], {type: 'region'});\r\n  let formattedName: string | undefined;\r\n\r\n  try {\r\n    formattedName = regionNames.of(countryCode.toUpperCase());\r\n  } catch (e) {}\r\n\r\n  return <Fragment>{formattedName}</Fragment>;\r\n});\r\n","import {\r\n  LocationDatasetItem,\r\n  ReportMetric,\r\n} from '@common/admin/analytics/report-metric';\r\nimport React, {useMemo, useRef} from 'react';\r\nimport {useGoogleGeoChart} from './use-google-geo-chart';\r\nimport {ChartLayout, ChartLayoutProps} from '@common/charts/chart-layout';\r\nimport {Trans} from '@common/i18n/trans';\r\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\r\nimport {Button} from '@common/ui/buttons/button';\r\nimport {ArrowBackIcon} from '@common/icons/material/ArrowBack';\r\nimport clsx from 'clsx';\r\nimport {InfoDialogTrigger} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\r\nimport {FormattedCountryName} from '@common/i18n/formatted-country-name';\r\n\r\ninterface GeoChartData extends Partial<ChartLayoutProps> {\r\n  data?: ReportMetric<LocationDatasetItem>;\r\n  onCountrySelected?: (countryCode: string | undefined) => void;\r\n  country?: string;\r\n}\r\nexport function GeoChart({\r\n  data: metricData,\r\n  isLoading,\r\n  onCountrySelected,\r\n  country,\r\n  ...layoutProps\r\n}: GeoChartData) {\r\n  const placeholderRef = useRef<HTMLDivElement>(null);\r\n  const regionInteractivity = !!onCountrySelected;\r\n\r\n  // memo data to avoid redrawing chart on rerender\r\n  const initialData = metricData?.datasets[0].data;\r\n  const data = useMemo(() => {\r\n    return initialData || [];\r\n  }, [initialData]);\r\n  useGoogleGeoChart({placeholderRef, data, country, onCountrySelected});\r\n\r\n  return (\r\n    <ChartLayout\r\n      {...layoutProps}\r\n      className=\"min-w-500\"\r\n      title={\r\n        <div className=\"flex items-center\">\r\n          <Trans message=\"Top Locations\" />\r\n          {country ? (\r\n            <span className=\"pl-4\">\r\n              ({<FormattedCountryName code={country} />})\r\n            </span>\r\n          ) : null}\r\n          {regionInteractivity && <InfoTrigger />}\r\n        </div>\r\n      }\r\n      contentIsFlex={isLoading}\r\n    >\r\n      {isLoading && <ChartLoadingIndicator />}\r\n      <div className=\"flex gap-24\">\r\n        <div\r\n          ref={placeholderRef}\r\n          className=\"flex-auto w-[480px] min-h-[340px]\"\r\n        />\r\n        <div className=\"w-[170px]\">\r\n          <div className=\"text-sm max-h-[340px] w-full flex-initial overflow-y-auto\">\r\n            {data.map(location => (\r\n              <div\r\n                key={location.label}\r\n                className={clsx(\r\n                  'flex items-center gap-4 mb-4',\r\n                  regionInteractivity && 'cursor-pointer hover:underline'\r\n                )}\r\n                role={regionInteractivity ? 'button' : undefined}\r\n                onClick={() => {\r\n                  onCountrySelected?.(location.code);\r\n                }}\r\n              >\r\n                <div className=\"max-w-110 whitespace-nowrap overflow-hidden overflow-ellipsis\">\r\n                  {location.label}\r\n                </div>\r\n                <div>({location.percentage})%</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {country && (\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              className=\"mt-14\"\r\n              startIcon={<ArrowBackIcon />}\r\n              onClick={() => {\r\n                onCountrySelected?.(undefined);\r\n              }}\r\n            >\r\n              <Trans message=\"Back to countries\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </ChartLayout>\r\n  );\r\n}\r\n\r\nfunction InfoTrigger() {\r\n  return (\r\n    <InfoDialogTrigger\r\n      title={<Trans message=\"Zooming in\" />}\r\n      body={\r\n        <Trans message=\"Click on a country inside the map or country list to zoom in and see city data for that country.\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React, {Fragment} from 'react';\r\nimport {LineChart} from '@common/charts/line-chart';\r\nimport {Trans} from '@common/i18n/trans';\r\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\r\nimport {BarChart} from '@common/charts/bar-chart';\r\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\r\nimport {FormattedNumber} from '@common/i18n/formatted-number';\r\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\r\n\r\nexport const AdminReportPageColGap = 'gap-12 md:gap-24 mb-12 md:mb-24';\r\nconst rowClassName = `flex flex-col md:flex-row md:items-center overflow-x-auto ${AdminReportPageColGap}`;\r\n\r\ninterface AdminReportChartsProps {\r\n  report?: VisitorsReportData;\r\n  isLoading: boolean;\r\n}\r\nexport function VisitorsReportCharts({\r\n  report,\r\n  isLoading,\r\n}: AdminReportChartsProps) {\r\n  const totalViews = report?.pageViews.total;\r\n  return (\r\n    <Fragment>\r\n      <div className={rowClassName}>\r\n        <LineChart\r\n          isLoading={isLoading}\r\n          className=\"flex-auto\"\r\n          data={report?.pageViews}\r\n          title={<Trans message=\"Pageviews\" />}\r\n          description={\r\n            totalViews ? (\r\n              <Trans\r\n                message=\":count total views\"\r\n                values={{count: <FormattedNumber value={totalViews} />}}\r\n              />\r\n            ) : null\r\n          }\r\n        />\r\n        <PolarAreaChart\r\n          isLoading={isLoading}\r\n          data={report?.devices}\r\n          title={<Trans message=\"Top devices\" />}\r\n        />\r\n      </div>\r\n      <div className={rowClassName}>\r\n        <BarChart\r\n          isLoading={isLoading}\r\n          data={report?.browsers}\r\n          className=\"flex-auto md:w-1/3\"\r\n          direction=\"horizontal\"\r\n          individualBarColors\r\n          hideLegend\r\n          title={<Trans message=\"Top browsers\" />}\r\n        />\r\n        <GeoChart\r\n          isLoading={isLoading}\r\n          className=\"flex-auto\"\r\n          data={report?.locations}\r\n          title={<Trans message=\"Top locations\" />}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n","import {HeaderDatum} from '@common/admin/analytics/use-admin-report';\r\nimport React, {\r\n  cloneElement,\r\n  Fragment,\r\n  isValidElement,\r\n  ReactElement,\r\n} from 'react';\r\nimport {TrendingUpIcon} from '@common/icons/material/TrendingUp';\r\nimport {TrendingDownIcon} from '@common/icons/material/TrendingDown';\r\nimport {createSvgIconFromTree} from '@common/icons/create-svg-icon';\r\nimport {AdminReportPageColGap} from '@common/admin/analytics/visitors-report-charts';\r\nimport {FormattedNumber} from '@common/i18n/formatted-number';\r\nimport {FormattedBytes} from '@common/uploads/formatted-bytes';\r\nimport {TrendingFlatIcon} from '@common/icons/material/TrendingFlat';\r\nimport {AnimatePresence, m} from 'framer-motion';\r\nimport {opacityAnimation} from '@common/ui/animation/opacity-animation';\r\nimport {Skeleton} from '@common/ui/skeleton/skeleton';\r\n\r\ninterface AdminHeaderReportProps {\r\n  report?: HeaderDatum[];\r\n  isLoading?: boolean;\r\n}\r\nexport function AdminHeaderReport({report, isLoading}: AdminHeaderReportProps) {\r\n  return (\r\n    <div\r\n      className={`flex h-[97px] flex-shrink-0 items-center overflow-x-auto ${AdminReportPageColGap}`}\r\n    >\r\n      {report?.map(datum => (\r\n        <ReportItem key={datum.name} datum={datum} isLoading={isLoading} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ValueMetricItemProps {\r\n  datum: HeaderDatum;\r\n  isLoading?: boolean;\r\n}\r\nfunction ReportItem({datum, isLoading = false}: ValueMetricItemProps) {\r\n  let icon;\r\n  if (isValidElement(datum.icon)) {\r\n    icon = cloneElement(datum.icon, {size: 'lg'});\r\n  } else {\r\n    const IconEl = createSvgIconFromTree(datum.icon);\r\n    icon = <IconEl size=\"lg\" />;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      key={datum.name}\r\n      className=\"rounded-panel flex h-full flex-auto items-center gap-18 whitespace-nowrap border p-20\"\r\n    >\r\n      <div className=\"flex-shrink-0 rounded-lg bg-primary-light/20 p-10 text-primary\">\r\n        {icon}\r\n      </div>\r\n      <div className=\"flex-auto\">\r\n        <div className=\"flex items-center justify-between gap-20\">\r\n          <div className=\"text-lg font-bold text-main\">\r\n            <AnimatePresence initial={false} mode=\"wait\">\r\n              {isLoading ? (\r\n                <m.div key=\"skeleton\" {...opacityAnimation}>\r\n                  <Skeleton className=\"min-w-24\" />\r\n                </m.div>\r\n              ) : (\r\n                <m.div key=\"value\" {...opacityAnimation}>\r\n                  <FormattedValue datum={datum} />\r\n                </m.div>\r\n              )}\r\n            </AnimatePresence>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center justify-between gap-20\">\r\n          <h2 className=\"text-sm text-muted\">{datum.name}</h2>\r\n          {(datum.percentageChange != null || datum.previousValue != null) && (\r\n            <div className=\"flex items-center gap-10\">\r\n              <TrendingIndicator datum={datum} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface FormattedValueProps {\r\n  datum: HeaderDatum;\r\n}\r\nfunction FormattedValue({datum}: FormattedValueProps) {\r\n  switch (datum.type) {\r\n    case 'fileSize':\r\n      return <FormattedBytes bytes={datum.currentValue} />;\r\n    case 'percentage':\r\n      return (\r\n        <FormattedNumber\r\n          value={datum.currentValue}\r\n          style=\"percent\"\r\n          maximumFractionDigits={1}\r\n        />\r\n      );\r\n    default:\r\n      return <FormattedNumber value={datum.currentValue} />;\r\n  }\r\n}\r\n\r\ninterface TrendingIndicatorProps {\r\n  datum: HeaderDatum;\r\n}\r\nfunction TrendingIndicator({datum}: TrendingIndicatorProps) {\r\n  const percentage = calculatePercentage(datum);\r\n  let icon: ReactElement;\r\n  if (percentage > 0) {\r\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\r\n  } else if (percentage === 0) {\r\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\r\n  } else {\r\n    icon = <TrendingDownIcon className=\"text-danger\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {icon}\r\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nfunction calculatePercentage({\r\n  percentageChange,\r\n  previousValue,\r\n  currentValue,\r\n}: HeaderDatum) {\r\n  if (\r\n    percentageChange != null ||\r\n    previousValue == null ||\r\n    currentValue == null\r\n  ) {\r\n    return percentageChange ?? 0;\r\n  }\r\n\r\n  if (previousValue === 0) {\r\n    return 100;\r\n  }\r\n\r\n  return Math.round(((currentValue - previousValue) / previousValue) * 100);\r\n}\r\n","import {useDateRangePickerState} from '@common/ui/forms/input-field/date/date-range-picker/use-date-range-picker-state';\r\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\r\nimport {Button} from '@common/ui/buttons/button';\r\nimport {DateRangeIcon} from '@common/icons/material/DateRange';\r\nimport {FormattedDateTimeRange} from '@common/i18n/formatted-date-time-range';\r\nimport {DateRangeDialog} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-dialog';\r\nimport React from 'react';\r\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {useIsMobileMediaQuery} from '@common/utils/hooks/is-mobile-media-query';\r\nimport {DateFormatPresets} from '@common/i18n/formatted-date';\r\nimport {DateRangeComparePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-compare-presets';\r\nimport {Granularity} from '@common/ui/forms/input-field/date/date-picker/use-date-picker-state';\r\n\r\nconst monthDayFormat: Intl.DateTimeFormatOptions = {\r\n  month: 'short',\r\n  day: '2-digit',\r\n};\r\n\r\ninterface ReportDataSelectorProps {\r\n  value: DateRangeValue;\r\n  disabled?: boolean;\r\n  onChange: (value: DateRangeValue) => void;\r\n  compactOnMobile?: boolean;\r\n  enableCompare?: boolean;\r\n  granularity?: Granularity;\r\n}\r\nexport function ReportDateSelector({\r\n  value,\r\n  onChange,\r\n  disabled,\r\n  compactOnMobile = true,\r\n  enableCompare = false,\r\n  granularity = 'minute',\r\n}: ReportDataSelectorProps) {\r\n  const isMobile = useIsMobileMediaQuery();\r\n  return (\r\n    <DialogTrigger\r\n      type=\"popover\"\r\n      onClose={value => {\r\n        if (value) {\r\n          onChange(value);\r\n        }\r\n      }}\r\n    >\r\n      <Button\r\n        variant=\"outline\"\r\n        color=\"chip\"\r\n        endIcon={<DateRangeIcon />}\r\n        disabled={disabled}\r\n      >\r\n        <FormattedDateTimeRange\r\n          start={value.start}\r\n          end={value.end}\r\n          options={\r\n            isMobile && compactOnMobile\r\n              ? monthDayFormat\r\n              : DateFormatPresets.short\r\n          }\r\n        />\r\n      </Button>\r\n      <DateSelectorDialog\r\n        value={value}\r\n        enableCompare={enableCompare}\r\n        granularity={granularity}\r\n      />\r\n    </DialogTrigger>\r\n  );\r\n}\r\n\r\ninterface DateSelectorDialogProps {\r\n  value: DateRangeValue;\r\n  enableCompare: boolean;\r\n  granularity: Granularity;\r\n}\r\nfunction DateSelectorDialog({\r\n  value,\r\n  enableCompare,\r\n  granularity,\r\n}: DateSelectorDialogProps) {\r\n  const isMobile = useIsMobileMediaQuery();\r\n  const state = useDateRangePickerState({\r\n    granularity,\r\n    defaultValue: {\r\n      start: value.start,\r\n      end: value.end,\r\n      preset: value.preset,\r\n    },\r\n    closeDialogOnSelection: false,\r\n  });\r\n  const compareHasInitialValue = !!value.compareStart && !!value.compareEnd;\r\n  const compareState = useDateRangePickerState({\r\n    granularity,\r\n    defaultValue: compareHasInitialValue\r\n      ? {\r\n          start: value.compareStart,\r\n          end: value.compareEnd,\r\n          preset: value.comparePreset,\r\n        }\r\n      : DateRangeComparePresets[0].getRangeValue(state.selectedValue),\r\n  });\r\n  return (\r\n    <DateRangeDialog\r\n      state={state}\r\n      compareState={enableCompare ? compareState : undefined}\r\n      compareVisibleDefault={compareHasInitialValue}\r\n      showInlineDatePickerField={!isMobile}\r\n    />\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useAdminReport} from './use-admin-report';\r\nimport {Trans} from '../../i18n/trans';\r\nimport {StaticPageTitle} from '../../seo/static-page-title';\r\nimport {AdminHeaderReport} from '@common/admin/analytics/admin-header-report';\r\nimport {VisitorsReportCharts} from '@common/admin/analytics/visitors-report-charts';\r\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {DateRangePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-presets';\r\nimport {ReportDateSelector} from '@common/admin/analytics/report-date-selector';\r\n\r\nexport default function AdminReportPage() {\r\n  const [dateRange, setDateRange] = useState<DateRangeValue>(() => {\r\n    // This week\r\n    return DateRangePresets[2].getRangeValue();\r\n  });\r\n  const {isLoading, data} = useAdminReport({dateRange});\r\n  const title = <Trans message=\"Visitors report\" />;\r\n\r\n  return (\r\n    <div className=\"min-h-full gap-12 overflow-x-hidden p-12 md:gap-24 md:p-24\">\r\n      <div className=\"mb-24 items-center justify-between gap-24 md:flex\">\r\n        <StaticPageTitle>{title}</StaticPageTitle>\r\n        <h1 className=\"mb-24 text-3xl font-light md:mb-0\">{title}</h1>\r\n        <ReportDateSelector value={dateRange} onChange={setDateRange} />\r\n      </div>\r\n      <AdminHeaderReport report={data?.headerReport} />\r\n      <VisitorsReportCharts\r\n        report={data?.visitorsReport}\r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["formattedData","value"],"mappings":"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"}