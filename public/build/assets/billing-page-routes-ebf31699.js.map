{"version":3,"file":"billing-page-routes-ebf31699.js","sources":["../../../common/resources/client/auth/guards/subscribed-route.tsx","../../../common/resources/client/billing/billing-page/billing-page-layout.tsx","../../../common/resources/client/billing/billing-page/change-payment-method/change-payment-method-layout.tsx","../../../common/resources/client/billing/billing-page/change-payment-method/change-payment-method-page.tsx","../../../common/resources/client/billing/billing-page/use-billing-user.ts","../../../common/resources/client/billing/billing-page/change-payment-method/change-payment-method-done.tsx","../../../common/resources/client/billing/billing-page/billing-plan-panel.tsx","../../../common/resources/client/billing/pricing-table/find-best-price.ts","../../../common/resources/client/billing/pricing-table/upsell-label.tsx","../../../common/resources/client/billing/pricing-table/billing-cycle-radio.tsx","../../../common/resources/client/billing/billing-page/change-plan-page.tsx","../../../common/resources/client/billing/billing-page/requests/use-change-subscription-plan.ts","../../../common/resources/client/billing/billing-page/confirm-plan-change-page.tsx","../../../common/resources/client/billing/billing-page/confirm-plan-cancellation-page.tsx","../../../common/resources/client/billing/billing-page/confirm-plan-renewal-page.tsx","../../../common/resources/client/billing/billing-page/panels/cancelled-plan-panel.tsx","../../../common/resources/client/billing/billing-page/panels/active-plan-panel.tsx","../../../common/resources/client/billing/billing-page/panels/payment-method-panel.tsx","../../../common/resources/client/billing/billing-page/requests/use-invoices.ts","../../../common/resources/client/billing/billing-page/panels/invoice-history-panel.tsx","../../../common/resources/client/billing/billing-page/billing-page.tsx","../../../common/resources/client/billing/billing-page/billing-page-routes.tsx"],"sourcesContent":["import {useAuth} from '../use-auth';\nimport {ReactElement} from 'react';\nimport {Navigate, Outlet} from 'react-router-dom';\n\ninterface GuestRouteProps {\n  children: ReactElement;\n}\nexport function SubscribedRoute({children}: GuestRouteProps) {\n  const {isSubscribed} = useAuth();\n\n  if (!isSubscribed) {\n    return <Navigate to=\"/pricing\" replace />;\n  }\n\n  return children || <Outlet />;\n}\n","import {useUser} from '../../auth/ui/use-user';\nimport {Navbar} from '../../ui/navigation/navbar/navbar';\nimport {ProgressCircle} from '../../ui/progress/progress-circle';\nimport {useAuth} from '../../auth/use-auth';\nimport {Outlet} from 'react-router-dom';\nimport {Footer} from '../../ui/footer/footer';\nimport {StaticPageTitle} from '../../seo/static-page-title';\nimport {Trans} from '../../i18n/trans';\nimport {Fragment} from 'react';\n\nexport function BillingPageLayout() {\n  const {user} = useAuth();\n  const query = useUser(user!.id, {\n    with: ['subscriptions.product', 'subscriptions.price'],\n  });\n\n  return (\n    <Fragment>\n      <StaticPageTitle>\n        <Trans message=\"Billing\" />\n      </StaticPageTitle>\n      <Navbar menuPosition=\"billing-page\" />\n      <div className=\"flex flex-col\">\n        <div className=\"container mx-auto my-24 px-24 flex-auto\">\n          {query.isLoading ? (\n            <ProgressCircle\n              className=\"my-80\"\n              aria-label=\"Loading user..\"\n              isIndeterminate\n            />\n          ) : (\n            <Outlet />\n          )}\n        </div>\n        <Footer className=\"container mx-auto px-24\" />\n      </div>\n    </Fragment>\n  );\n}\n","import {Fragment} from 'react';\nimport {Breadcrumb} from '../../../ui/breadcrumbs/breadcrumb';\nimport {useNavigate} from '../../../utils/hooks/use-navigate';\nimport {BreadcrumbItem} from '../../../ui/breadcrumbs/breadcrumb-item';\nimport {Trans} from '../../../i18n/trans';\nimport {Outlet} from 'react-router-dom';\n\nconst previousUrl = '/billing';\n\nexport function ChangePaymentMethodLayout() {\n  const navigate = useNavigate();\n\n  return (\n    <Fragment>\n      <Breadcrumb>\n        <BreadcrumbItem isLink onSelected={() => navigate(previousUrl)}>\n          <Trans message=\"Billing\" />\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <Trans message=\"Payment method\" />\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <h1 className=\"text-3xl font-bold my-32 md:my-64\">\n        <Trans message=\"Change payment method\" />\n      </h1>\n      <Outlet />\n    </Fragment>\n  );\n}\n","import {Trans} from '../../../i18n/trans';\nimport {Button} from '../../../ui/buttons/button';\nimport {Link} from 'react-router-dom';\nimport {StripeElementsForm} from '../../checkout/stripe/stripe-elements-form';\nimport {useSettings} from '../../../core/settings/use-settings';\n\nconst previousUrl = '/billing';\n\nexport function ChangePaymentMethodPage() {\n  const {base_url} = useSettings();\n\n  return (\n    <div className=\"max-w-[464px]\">\n      <StripeElementsForm\n        type=\"setupIntent\"\n        submitLabel={<Trans message=\"Change\" />}\n        returnUrl={`${base_url}/billing/change-payment-method/done`}\n      />\n      <Button\n        variant=\"outline\"\n        className=\"w-full mt-16\"\n        size=\"md\"\n        to={previousUrl}\n        elementType={Link}\n        type=\"button\"\n      >\n        <Trans message=\"Go back\" />\n      </Button>\n    </div>\n  );\n}\n","import {useUser} from '../../auth/ui/use-user';\nimport {queryClient} from '@common/http/query-client';\n\nexport function useBillingUser() {\n  const query = useUser('me', {\n    with: ['subscriptions.product', 'subscriptions.price'],\n  });\n\n  const subscription = query.data?.user.subscriptions?.[0];\n\n  return {subscription, isLoading: query.isLoading, user: query.data?.user};\n}\n\nexport function invalidateBillingUserQuery() {\n  queryClient.invalidateQueries({queryKey: ['users']});\n}\n","import {useEffect, useRef, useState} from 'react';\nimport {useSearchParams} from 'react-router-dom';\nimport {loadStripe, SetupIntent} from '@stripe/stripe-js';\nimport {message} from '../../../i18n/message';\nimport {apiClient} from '../../../http/query-client';\nimport {useNavigate} from '../../../utils/hooks/use-navigate';\nimport {\n  BillingRedirectMessage,\n  BillingRedirectMessageConfig,\n} from '../../billing-redirect-message';\nimport {invalidateBillingUserQuery} from '../use-billing-user';\nimport {useSettings} from '../../../core/settings/use-settings';\n\nconst previousUrl = '/billing';\n\nexport function ChangePaymentMethodDone() {\n  const {\n    billing: {stripe_public_key},\n  } = useSettings();\n  const navigate = useNavigate();\n\n  const [params] = useSearchParams();\n  const clientSecret = params.get('setup_intent_client_secret');\n\n  const [messageConfig, setMessageConfig] =\n    useState<BillingRedirectMessageConfig>();\n\n  const stripeInitiated = useRef<boolean>();\n\n  useEffect(() => {\n    if (stripeInitiated.current || !clientSecret) return;\n    loadStripe(stripe_public_key!).then(stripe => {\n      if (!stripe) {\n        setMessageConfig(getRedirectMessageConfig());\n        return;\n      }\n      stripe.retrieveSetupIntent(clientSecret).then(({setupIntent}) => {\n        if (setupIntent?.status === 'succeeded') {\n          changeDefaultPaymentMethod(setupIntent.payment_method as string).then(\n            () => {\n              invalidateBillingUserQuery();\n            }\n          );\n        }\n        setMessageConfig(getRedirectMessageConfig(setupIntent?.status));\n      });\n    });\n    stripeInitiated.current = true;\n  }, [stripe_public_key, clientSecret]);\n\n  if (!clientSecret) {\n    navigate(previousUrl);\n    return null;\n  }\n\n  return <BillingRedirectMessage config={messageConfig} />;\n}\n\nfunction getRedirectMessageConfig(\n  status?: SetupIntent.Status\n): BillingRedirectMessageConfig {\n  switch (status) {\n    case 'succeeded':\n      return {\n        ...redirectMessageDefaults,\n        message: message('Payment method changed successfully!'),\n        status: 'success',\n      };\n    case 'processing':\n      return {\n        ...redirectMessageDefaults,\n        message: message(\n          \"Your request is processing. We'll update you when your payment method is confirmed.\"\n        ),\n        status: 'success',\n      };\n    case 'requires_payment_method':\n      return {\n        ...redirectMessageDefaults,\n        message: message(\n          'Payment method confirmation failed. Please try another payment method.'\n        ),\n        status: 'error',\n      };\n    default:\n      return {\n        ...redirectMessageDefaults,\n        message: message('Something went wrong'),\n        status: 'error',\n      };\n  }\n}\n\nconst redirectMessageDefaults: Omit<\n  BillingRedirectMessageConfig,\n  'message' | 'status'\n> = {\n  link: previousUrl,\n  buttonLabel: message('Go back'),\n};\n\nfunction changeDefaultPaymentMethod(paymentMethodId: string) {\n  return apiClient.post('billing/stripe/change-default-payment-method', {\n    payment_method_id: paymentMethodId,\n  });\n}\n","import {ReactNode} from 'react';\n\ninterface BillingPlanPanelProps {\n  title: ReactNode;\n  children: ReactNode;\n}\nexport function BillingPlanPanel({title, children}: BillingPlanPanelProps) {\n  return (\n    <div className=\"mb-64\">\n      <div className=\"text-sm font-medium uppercase pb-16 mb-16 border-b\">\n        {title}\n      </div>\n      {children}\n    </div>\n  );\n}\n","import {Price} from '../price';\n\nexport type UpsellBillingCycle = 'monthly' | 'yearly';\n\nexport function findBestPrice(\n  token: UpsellBillingCycle,\n  prices: Price[]\n): Price | undefined {\n  if (token === 'monthly') {\n    const match = findMonthlyPrice(prices);\n    if (match) return match;\n  }\n\n  if (token === 'yearly') {\n    const match = findYearlyPrice(prices);\n    if (match) return match;\n  }\n\n  return prices[0];\n}\n\nfunction findYearlyPrice(prices: Price[]) {\n  return prices.find(price => {\n    if (price.interval === 'month' && price.interval_count >= 12) {\n      return price;\n    }\n    if (price.interval === 'year' && price.interval_count >= 1) {\n      return price;\n    }\n  });\n}\n\nfunction findMonthlyPrice(prices: Price[]) {\n  return prices.find(price => {\n    if (price.interval === 'day' && price.interval_count >= 30) {\n      return price;\n    }\n    if (price.interval === 'month' && price.interval_count >= 1) {\n      return price;\n    }\n  });\n}\n","// find the highest percentage decrease between monthly and yearly prices of specified products\nimport {Product} from '../product';\nimport {findBestPrice} from './find-best-price';\nimport {Fragment, memo} from 'react';\nimport {Trans} from '../../i18n/trans';\n\ninterface UpsellLabelProps {\n  products?: Product[];\n}\nexport const UpsellLabel = memo(({products}: UpsellLabelProps) => {\n  const upsellPercentage = calcHighestUpsellPercentage(products);\n\n  if (upsellPercentage <= 0) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <span className=\"font-medium text-positive-darker\">\n        {' '}\n        (\n        <Trans\n          message=\"Save up to :percentage%\"\n          values={{percentage: upsellPercentage}}\n        />\n        )\n      </span>\n    </Fragment>\n  );\n});\n\nfunction calcHighestUpsellPercentage(products?: Product[]) {\n  if (!products?.length) return 0;\n\n  const decreases = products.map(product => {\n    if (product.hidden) return 0;\n\n    const monthly = findBestPrice('monthly', product.prices);\n    const yearly = findBestPrice('yearly', product.prices);\n\n    if (!monthly || !yearly) return 0;\n\n    // monthly plan per year amount\n    const monthlyAmount = monthly.amount * 12;\n    const yearlyAmount = yearly.amount;\n\n    const savingsPercentage = Math.round(\n      ((monthlyAmount - yearlyAmount) / monthlyAmount) * 100,\n    );\n\n    if (savingsPercentage > 0 && savingsPercentage <= 200) {\n      return savingsPercentage;\n    }\n\n    return 0;\n  });\n\n  return Math.max(Math.max(...decreases), 0);\n}\n","import {Radio} from '../../ui/forms/radio-group/radio';\nimport {UpsellBillingCycle} from './find-best-price';\nimport {Trans} from '../../i18n/trans';\nimport {\n  RadioGroup,\n  RadioGroupProps,\n} from '../../ui/forms/radio-group/radio-group';\nimport {UpsellLabel} from './upsell-label';\nimport {Product} from '../product';\n\ninterface BillingCycleRadioProps extends Omit<RadioGroupProps, 'children'> {\n  selectedCycle: String;\n  onChange: (value: any) => void;\n  products?: Product[];\n}\nexport function BillingCycleRadio({\n  selectedCycle,\n  onChange,\n  products,\n  ...radioGroupProps\n}: BillingCycleRadioProps) {\n  return (\n    <RadioGroup {...radioGroupProps}>\n      <Radio\n        value=\"yearly\"\n        checked={selectedCycle === 'yearly'}\n        onChange={e => {\n          onChange(e.target.value);\n        }}\n      >\n        <Trans message=\"Annual\" />\n        <UpsellLabel products={products} />\n      </Radio>\n      <Radio\n        value=\"monthly\"\n        checked={selectedCycle === 'monthly'}\n        onChange={e => {\n          onChange(e.target.value);\n        }}\n      >\n        <Trans message=\"Monthly\" />\n      </Radio>\n    </RadioGroup>\n  );\n}\n","import {Breadcrumb} from '../../ui/breadcrumbs/breadcrumb';\nimport {BreadcrumbItem} from '../../ui/breadcrumbs/breadcrumb-item';\nimport {Trans} from '../../i18n/trans';\nimport {useNavigate} from '../../utils/hooks/use-navigate';\nimport {BillingPlanPanel} from './billing-plan-panel';\nimport {Product} from '../product';\nimport {\n  findBestPrice,\n  UpsellBillingCycle,\n} from '../pricing-table/find-best-price';\nimport {Fragment, useState} from 'react';\nimport {FormattedPrice} from '../../i18n/formatted-price';\nimport {Button} from '../../ui/buttons/button';\nimport {Link} from 'react-router-dom';\nimport {useProducts} from '../pricing-table/use-products';\nimport {Price} from '../price';\nimport {useBillingUser} from './use-billing-user';\nimport {CheckIcon} from '../../icons/material/Check';\nimport {Skeleton} from '../../ui/skeleton/skeleton';\nimport {AnimatePresence, m} from 'framer-motion';\nimport {BillingCycleRadio} from '../pricing-table/billing-cycle-radio';\nimport {opacityAnimation} from '../../ui/animation/opacity-animation';\n\nexport function ChangePlanPage() {\n  const navigate = useNavigate();\n  return (\n    <Fragment>\n      <Breadcrumb>\n        <BreadcrumbItem isLink onSelected={() => navigate('/billing')}>\n          <Trans message=\"Billing\" />\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <Trans message=\"Plans\" />\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <h1 className=\"my-32 text-3xl font-bold md:my-64\">\n        <Trans message=\"Change your plan\" />\n      </h1>\n      <BillingPlanPanel title={<Trans message=\"Available plans\" />}>\n        <AnimatePresence initial={false} mode=\"wait\">\n          <PlanList />\n        </AnimatePresence>\n      </BillingPlanPanel>\n    </Fragment>\n  );\n}\n\nfunction PlanList() {\n  const query = useProducts();\n  const [selectedCycle, setSelectedCycle] =\n    useState<UpsellBillingCycle>('monthly');\n\n  if (query.isLoading) {\n    return <PlanSkeleton key=\"plan-skeleton\" />;\n  }\n\n  return (\n    <Fragment key=\"plan-list\">\n      <BillingCycleRadio\n        products={query.data?.products}\n        selectedCycle={selectedCycle}\n        onChange={setSelectedCycle}\n        className=\"mb-20\"\n        size=\"md\"\n      />\n      {query.data?.products.map(plan => {\n        const price = findBestPrice(selectedCycle, plan.prices);\n        if (!price || plan.hidden) return null;\n        return (\n          <m.div\n            {...opacityAnimation}\n            key={plan.id}\n            className=\"justify-between gap-40 border-b py-32 md:flex\"\n          >\n            <div className=\"mb-40 md:mb-0\">\n              <div className=\"text-xl font-bold\">{plan.name}</div>\n              <FormattedPrice price={price} className=\"text-lg\" />\n              <div className=\"mt-12 text-base\">{plan.description}</div>\n              <FeatureList plan={plan} />\n            </div>\n            <ContinueButton product={plan} price={price} />\n          </m.div>\n        );\n      })}\n    </Fragment>\n  );\n}\n\ninterface FeatureListProps {\n  plan: Product;\n}\nfunction FeatureList({plan}: FeatureListProps) {\n  if (!plan.feature_list.length) return null;\n  return (\n    <div className=\"mt-32\">\n      <div className=\"mb-10 text-sm font-semibold\">\n        <Trans message=\"What's included\" />\n      </div>\n      {plan.feature_list.map(feature => (\n        <div key={feature} className=\"flex items-center gap-10 text-sm\">\n          <CheckIcon className=\"text-positive\" size=\"sm\" />\n          <Trans message={feature} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\ninterface ContinueButtonProps {\n  product: Product;\n  price: Price;\n}\nfunction ContinueButton({product, price}: ContinueButtonProps) {\n  const {subscription} = useBillingUser();\n  if (!subscription?.price || !subscription?.product) return null;\n\n  if (\n    subscription.product_id === product.id &&\n    subscription.price_id === price.id\n  ) {\n    return (\n      <div className=\"flex w-[168px] items-center justify-center gap-10 text-muted\">\n        <CheckIcon size=\"md\" />\n        <Trans message=\"Current plan\" />\n      </div>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"flat\"\n      color=\"primary\"\n      className=\"w-[168px]\"\n      size=\"md\"\n      elementType={Link}\n      to={`/billing/change-plan/${product.id}/${price.id}/confirm`}\n    >\n      <Trans message=\"Continue\" />\n    </Button>\n  );\n}\n\nfunction PlanSkeleton() {\n  return (\n    <m.div\n      key=\"plan-skeleton\"\n      {...opacityAnimation}\n      className=\"border-b py-32 text-2xl\"\n    >\n      <Skeleton className=\"mb-8\" />\n      <Skeleton className=\"mb-14\" />\n      <Skeleton className=\"mb-24\" />\n      <Skeleton className=\"mb-12\" />\n    </m.div>\n  );\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {apiClient} from '../../../http/query-client';\nimport {useTrans} from '../../../i18n/use-trans';\nimport {BackendResponse} from '../../../http/backend-response/backend-response';\nimport {toast} from '../../../ui/toast/toast';\nimport {message} from '../../../i18n/message';\nimport {User} from '../../../auth/user';\nimport {invalidateBillingUserQuery} from '../use-billing-user';\nimport {useNavigate} from '../../../utils/hooks/use-navigate';\nimport {showHttpErrorToast} from '../../../utils/http/show-http-error-toast';\n\ninterface Response extends BackendResponse {\n  user: User;\n}\n\ninterface Payload {\n  subscriptionId: number;\n  newProductId: number;\n  newPriceId: number;\n}\n\nexport function useChangeSubscriptionPlan() {\n  const {trans} = useTrans();\n  const navigate = useNavigate();\n  return useMutation({\n    mutationFn: (props: Payload) => changePlan(props),\n    onSuccess: () => {\n      toast(trans(message('Plan changed.')));\n      invalidateBillingUserQuery();\n      navigate('/billing');\n    },\n    onError: err => showHttpErrorToast(err),\n  });\n}\n\nfunction changePlan({subscriptionId, ...other}: Payload): Promise<Response> {\n  return apiClient\n    .post(`billing/subscriptions/${subscriptionId}/change-plan`, other)\n    .then(r => r.data);\n}\n","import {Breadcrumb} from '../../ui/breadcrumbs/breadcrumb';\nimport {BreadcrumbItem} from '../../ui/breadcrumbs/breadcrumb-item';\nimport {Trans} from '../../i18n/trans';\nimport {useNavigate} from '../../utils/hooks/use-navigate';\nimport {BillingPlanPanel} from './billing-plan-panel';\nimport {Fragment} from 'react';\nimport {useProducts} from '../pricing-table/use-products';\nimport {Link, Navigate, useParams} from 'react-router-dom';\nimport {Button} from '../../ui/buttons/button';\nimport {FormattedPrice} from '../../i18n/formatted-price';\nimport {useBillingUser} from './use-billing-user';\nimport {FormattedDate} from '../../i18n/formatted-date';\nimport {useChangeSubscriptionPlan} from './requests/use-change-subscription-plan';\n\nconst previousUrl = '/billing/change-plan';\n\nexport function ConfirmPlanChangePage() {\n  const {productId, priceId} = useParams();\n  const navigate = useNavigate();\n  const query = useProducts();\n  const {subscription} = useBillingUser();\n  const changePlan = useChangeSubscriptionPlan();\n\n  if (!query.data || subscription?.price_id == priceId) {\n    return <Navigate to=\"/billing/change-plan\" replace />;\n  }\n\n  const newProduct = query.data.products.find(p => `${p.id}` === productId);\n  const newPrice = newProduct?.prices.find(p => `${p.id}` === priceId);\n\n  if (!newProduct || !newPrice || !subscription) {\n    navigate(previousUrl);\n    return null;\n  }\n\n  const newDate = (\n    <span className=\"whitespace-nowrap\">\n      <FormattedDate date={subscription.renews_at} preset=\"long\" />;\n    </span>\n  );\n\n  return (\n    <Fragment>\n      <Breadcrumb>\n        <BreadcrumbItem isLink onSelected={() => navigate('/billing')}>\n          <Trans message=\"Billing\" />\n        </BreadcrumbItem>\n        <BreadcrumbItem onSelected={() => navigate(previousUrl)}>\n          <Trans message=\"Plans\" />\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <Trans message=\"Confirm\" />\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <h1 className=\"text-3xl font-bold my-32 md:my-64\">\n        <Trans message=\"Confirm your new plan\" />\n      </h1>\n      <BillingPlanPanel title={<Trans message=\"Changing to\" />}>\n        <div className=\"max-w-[464px]\">\n          <div className=\"text-xl font-bold\">{newProduct.name}</div>\n          <FormattedPrice price={newPrice} className=\"text-lg\" />\n          <div className=\"text-base mt-12 border-b pb-24 mb-48\">\n            <Trans\n              message=\"You will be charged the new price starting :date\"\n              values={{date: newDate}}\n            />\n          </div>\n          <div>\n            <div>\n              <Button\n                variant=\"flat\"\n                color=\"primary\"\n                size=\"md\"\n                className=\"w-full mb-16\"\n                onClick={() => {\n                  changePlan.mutate({\n                    subscriptionId: subscription.id,\n                    newProductId: newProduct.id,\n                    newPriceId: newPrice.id,\n                  });\n                }}\n                disabled={changePlan.isPending}\n              >\n                <Trans message=\"Confirm\" />\n              </Button>\n            </div>\n            <div>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                to={previousUrl}\n                elementType={Link}\n              >\n                <Trans message=\"Go back\" />\n              </Button>\n            </div>\n            <div className=\"text-xs text-muted mt-12\">\n              <Trans message=\"By confirming your new plan, you agree to our terms of Service and privacy policy.\" />\n            </div>\n          </div>\n        </div>\n      </BillingPlanPanel>\n    </Fragment>\n  );\n}\n","import {Breadcrumb} from '../../ui/breadcrumbs/breadcrumb';\nimport {BreadcrumbItem} from '../../ui/breadcrumbs/breadcrumb-item';\nimport {Trans} from '../../i18n/trans';\nimport {useNavigate} from '../../utils/hooks/use-navigate';\nimport {BillingPlanPanel} from './billing-plan-panel';\nimport {Fragment} from 'react';\nimport {useProducts} from '../pricing-table/use-products';\nimport {Link} from 'react-router-dom';\nimport {Button} from '../../ui/buttons/button';\nimport {FormattedPrice} from '../../i18n/formatted-price';\nimport {invalidateBillingUserQuery, useBillingUser} from './use-billing-user';\nimport {useCancelSubscription} from './requests/use-cancel-subscription';\nimport {FormattedDate} from '../../i18n/formatted-date';\n\nconst previousUrl = '/billing';\n\nexport function ConfirmPlanCancellationPage() {\n  const navigate = useNavigate();\n  const query = useProducts();\n  const {subscription} = useBillingUser();\n  const cancelSubscription = useCancelSubscription();\n\n  const product = subscription?.product;\n  const price = subscription?.price;\n\n  if (!query.data) {\n    return null;\n  }\n\n  if (!subscription || !product || !price) {\n    navigate(previousUrl);\n    return null;\n  }\n\n  const renewDate = (\n    <span className=\"whitespace-nowrap\">\n      <FormattedDate date={subscription.renews_at} preset=\"long\" />\n    </span>\n  );\n\n  const handleSubscriptionCancel = () => {\n    cancelSubscription.mutate(\n      {\n        subscriptionId: subscription.id,\n      },\n      {\n        onSuccess: () => {\n          invalidateBillingUserQuery();\n          navigate('/billing');\n        },\n      },\n    );\n  };\n\n  return (\n    <Fragment>\n      <Breadcrumb>\n        <BreadcrumbItem isLink onSelected={() => navigate(previousUrl)}>\n          <Trans message=\"Billing\" />\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <Trans message=\"Cancel\" />\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <h1 className=\"text-3xl font-bold my-32 md:my-64\">\n        <Trans message=\"Cancel your plan\" />\n      </h1>\n      <BillingPlanPanel title={<Trans message=\"Current plan\" />}>\n        <div className=\"max-w-[464px]\">\n          <div className=\"text-xl font-bold\">{product.name}</div>\n          <FormattedPrice price={price} className=\"text-lg\" />\n          <div className=\"text-base mt-12 border-b pb-24 mb-48\">\n            <Trans\n              message=\"Your plan will be canceled, but is still available until the end of your billing period on :date\"\n              values={{date: renewDate}}\n            />\n            <div className=\"mt-20\">\n              <Trans message=\"If you change your mind, you can renew your subscription.\" />\n            </div>\n          </div>\n          <div>\n            <div>\n              <Button\n                variant=\"flat\"\n                color=\"primary\"\n                size=\"md\"\n                className=\"w-full mb-16\"\n                onClick={handleSubscriptionCancel}\n                disabled={cancelSubscription.isPending}\n              >\n                <Trans message=\"Cancel plan\" />\n              </Button>\n            </div>\n            <div>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                to={previousUrl}\n                elementType={Link}\n              >\n                <Trans message=\"Go back\" />\n              </Button>\n            </div>\n            <div className=\"text-xs text-muted mt-12\">\n              <Trans message=\"By cancelling your plan, you agree to our terms of service and privacy policy.\" />\n            </div>\n          </div>\n        </div>\n      </BillingPlanPanel>\n    </Fragment>\n  );\n}\n","import {Breadcrumb} from '../../ui/breadcrumbs/breadcrumb';\nimport {BreadcrumbItem} from '../../ui/breadcrumbs/breadcrumb-item';\nimport {Trans} from '../../i18n/trans';\nimport {useNavigate} from '../../utils/hooks/use-navigate';\nimport {BillingPlanPanel} from './billing-plan-panel';\nimport {Fragment} from 'react';\nimport {useProducts} from '../pricing-table/use-products';\nimport {Link} from 'react-router-dom';\nimport {Button} from '../../ui/buttons/button';\nimport {FormattedPrice} from '../../i18n/formatted-price';\nimport {invalidateBillingUserQuery, useBillingUser} from './use-billing-user';\nimport {FormattedDate} from '../../i18n/formatted-date';\nimport {useResumeSubscription} from './requests/use-resume-subscription';\n\nconst previousUrl = '/billing';\n\nexport function ConfirmPlanRenewalPage() {\n  const navigate = useNavigate();\n  const query = useProducts();\n  const {subscription} = useBillingUser();\n  const resumeSubscription = useResumeSubscription();\n\n  const product = subscription?.product;\n  const price = subscription?.price;\n\n  if (!query.data) {\n    return null;\n  }\n\n  if (!subscription || !product || !price) {\n    navigate(previousUrl);\n    return null;\n  }\n\n  const endDate = (\n    <span className=\"whitespace-nowrap\">\n      <FormattedDate date={subscription.ends_at} preset=\"long\" />;\n    </span>\n  );\n\n  const handleResumeSubscription = () => {\n    resumeSubscription.mutate(\n      {\n        subscriptionId: subscription.id,\n      },\n      {\n        onSuccess: () => {\n          invalidateBillingUserQuery();\n          navigate('/billing');\n        },\n      },\n    );\n  };\n\n  return (\n    <Fragment>\n      <Breadcrumb>\n        <BreadcrumbItem isLink onSelected={() => navigate(previousUrl)}>\n          <Trans message=\"Billing\" />\n        </BreadcrumbItem>\n        <BreadcrumbItem>\n          <Trans message=\"Renew\" />\n        </BreadcrumbItem>\n      </Breadcrumb>\n      <h1 className=\"text-3xl font-bold my-32 md:my-64\">\n        <Trans message=\"Renew your plan\" />\n      </h1>\n      <BillingPlanPanel title={<Trans message=\"Current plan\" />}>\n        <div className=\"max-w-[464px]\">\n          <div className=\"text-xl font-bold\">{product.name}</div>\n          <FormattedPrice price={price} className=\"text-lg\" />\n          <div className=\"text-base mt-12 border-b pb-24 mb-48\">\n            <Trans\n              message=\"This plan will no longer be canceled. It will renew on :date\"\n              values={{date: endDate}}\n            />\n          </div>\n          <Button\n            variant=\"flat\"\n            color=\"primary\"\n            size=\"md\"\n            className=\"w-full mb-16\"\n            onClick={handleResumeSubscription}\n            disabled={resumeSubscription.isPending}\n          >\n            <Trans message=\"Renew plan\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            to={previousUrl}\n            elementType={Link}\n          >\n            <Trans message=\"Go back\" />\n          </Button>\n          <div className=\"text-xs text-muted mt-12\">\n            <Trans message=\"By renewing your plan, you agree to our terms of service and privacy policy.\" />\n          </div>\n        </div>\n      </BillingPlanPanel>\n    </Fragment>\n  );\n}\n","import {useBillingUser} from '../use-billing-user';\nimport {FormattedDate} from '../../../i18n/formatted-date';\nimport {BillingPlanPanel} from '../billing-plan-panel';\nimport {Trans} from '../../../i18n/trans';\nimport {Chip} from '../../../ui/forms/input-field/chip-field/chip';\nimport {FormattedPrice} from '../../../i18n/formatted-price';\nimport {CalendarTodayIcon} from '../../../icons/material/CalendarToday';\nimport {Button} from '../../../ui/buttons/button';\nimport {Link} from 'react-router-dom';\n\nexport function CancelledPlanPanel() {\n  const {subscription} = useBillingUser();\n  if (!subscription?.price || !subscription?.product) return null;\n\n  const endingDate = (\n    <span className=\"whitespace-nowrap\">\n      <FormattedDate preset=\"long\" date={subscription.ends_at} />\n    </span>\n  );\n\n  return (\n    <BillingPlanPanel title={<Trans message=\"Current plan\" />}>\n      <div className=\"mt-24 flex flex-col justify-between gap-20\">\n        <div>\n          <Chip\n            className=\"mb-10 w-min\"\n            size=\"xs\"\n            radius=\"rounded\"\n            color=\"danger\"\n          >\n            <Trans message=\"Canceled\" />\n          </Chip>\n          <div className=\"mb-2 text-xl font-bold\">\n            {subscription.product.name}\n          </div>\n          <FormattedPrice className=\"mb-8 text-xl\" price={subscription.price} />\n          <div className=\"flex items-center gap-8 text-base\">\n            <CalendarTodayIcon size=\"sm\" className=\"text-muted\" />\n            <div className=\"flex-auto\">\n              <Trans\n                message=\"Your plan will be canceled on :date\"\n                values={{date: endingDate}}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"w-[233px]\">\n          <Button\n            variant=\"flat\"\n            color=\"primary\"\n            size=\"md\"\n            className=\"mb-12 w-full\"\n            elementType={Link}\n            to=\"/billing/renew\"\n          >\n            <Trans message=\"Renew plan\" />\n          </Button>\n        </div>\n      </div>\n    </BillingPlanPanel>\n  );\n}\n","import {useBillingUser} from '@common/billing/billing-page/use-billing-user';\nimport {FormattedDate} from '@common/i18n/formatted-date';\nimport {BillingPlanPanel} from '@common/billing/billing-page/billing-plan-panel';\nimport {Trans} from '@common/i18n/trans';\nimport {FormattedPrice} from '@common/i18n/formatted-price';\nimport {Button} from '@common/ui/buttons/button';\nimport {Link} from 'react-router-dom';\nimport {Fragment} from 'react';\nimport {SectionHelper} from '@common/ui/section-helper';\n\nexport function ActivePlanPanel() {\n  const {subscription} = useBillingUser();\n  if (!subscription?.price || !subscription?.product) return null;\n\n  const renewDate = (\n    <FormattedDate preset=\"long\" date={subscription.renews_at} />\n  );\n\n  return (\n    <Fragment>\n      {subscription.past_due ? <PastDueMessage /> : null}\n      <BillingPlanPanel title={<Trans message=\"Current plan\" />}>\n        <div className=\"mt-24 flex justify-between gap-20\">\n          <div>\n            <div className=\"mb-2 text-xl font-bold\">\n              {subscription.product.name}\n            </div>\n            <FormattedPrice\n              className=\"mb-2 text-xl\"\n              price={subscription.price}\n            />\n            <div className=\"text-base\">\n              <Trans\n                message=\"Your plan renews on :date\"\n                values={{date: renewDate}}\n              />\n            </div>\n          </div>\n          <div className=\"w-[233px]\">\n            <Button\n              variant=\"flat\"\n              color=\"primary\"\n              size=\"md\"\n              className=\"mb-12 w-full\"\n              elementType={Link}\n              to=\"/billing/change-plan\"\n              disabled={subscription.gateway_name === 'none'}\n            >\n              <Trans message=\"Change plan\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              color=\"danger\"\n              size=\"md\"\n              className=\"w-full\"\n              elementType={Link}\n              to=\"/billing/cancel\"\n            >\n              <Trans message=\"Cancel plan\" />\n            </Button>\n          </div>\n        </div>\n      </BillingPlanPanel>\n    </Fragment>\n  );\n}\n\nfunction PastDueMessage() {\n  return (\n    <SectionHelper\n      className=\"mb-24\"\n      color=\"danger\"\n      title=\"Payment is past due\"\n      description=\"Your recent recurring payment has failed with the payment method we have on file. Please update your payment method to avoid any service interruptions.\"\n    />\n  );\n}\n","import {useBillingUser} from '../use-billing-user';\nimport {BillingPlanPanel} from '../billing-plan-panel';\nimport {Trans} from '../../../i18n/trans';\nimport {Link} from 'react-router-dom';\nimport {EditIcon} from '../../../icons/material/Edit';\nimport {Fragment} from 'react';\nimport paypalSvg from './paypal.svg';\nimport {SvgImage} from '../../../ui/images/svg-image/svg-image';\n\nexport function PaymentMethodPanel() {\n  const {user, subscription} = useBillingUser();\n\n  const isPaypal = false;\n  const PaymentMethod = isPaypal ? PaypalPaymentMethod : CardPaymentMethod;\n\n  return (\n    <BillingPlanPanel title={<Trans message=\"Payment method\" />}>\n      <PaymentMethod\n        methodClassName=\"whitespace-nowrap text-base max-w-[464px] flex items-center gap-10\"\n        linkClassName=\"flex items-center gap-4 text-muted mt-18 block hover:underline\"\n      />\n    </BillingPlanPanel>\n  );\n}\n\ninterface PaymentMethodProps {\n  methodClassName: string;\n  linkClassName: string;\n}\nfunction CardPaymentMethod({\n  methodClassName,\n  linkClassName,\n}: PaymentMethodProps) {\n  const {user} = useBillingUser();\n  return (\n    <Fragment>\n      <div className={methodClassName}>\n        <span className=\"capitalize\">{user?.card_brand}</span> ••••\n        {user?.card_last_four}\n        {user?.card_expires && (\n          <div className=\"ml-auto\">\n            <Trans message=\"Expires :date\" values={{date: user?.card_expires}} />\n          </div>\n        )}\n      </div>\n      <Link className={linkClassName} to=\"/billing/change-payment-method\">\n        <EditIcon size=\"sm\" />\n        <Trans message=\"Change payment method\" />\n      </Link>\n    </Fragment>\n  );\n}\n\nfunction PaypalPaymentMethod({\n  methodClassName,\n  linkClassName,\n}: PaymentMethodProps) {\n  const {subscription} = useBillingUser();\n  return (\n    <Fragment>\n      <div className={methodClassName}>\n        <SvgImage src={paypalSvg} />\n      </div>\n      <a\n        className={linkClassName}\n        href={`https://www.sandbox.paypal.com/myaccount/autopay/connect/${subscription?.gateway_id}/funding`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <EditIcon size=\"sm\" />\n        <Trans message=\"Change payment method\" />\n      </a>\n    </Fragment>\n  );\n}\n","import {useQuery} from '@tanstack/react-query';\nimport {apiClient} from '@common/http/query-client';\nimport {Invoice} from '@common/billing/invoice';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\n\nconst Endpoint = 'billing/invoices';\n\nexport interface FetchInvoicesResponse extends BackendResponse {\n  invoices: Invoice[];\n}\n\nexport function useInvoices(userId: number) {\n  return useQuery({\n    queryKey: [Endpoint],\n    queryFn: () => fetchInvoices(userId),\n  });\n}\n\nfunction fetchInvoices(userId: number): Promise<FetchInvoicesResponse> {\n  return apiClient\n    .get(Endpoint, {params: {userId}})\n    .then(response => response.data);\n}\n","import {useBillingUser} from '../use-billing-user';\nimport {BillingPlanPanel} from '../billing-plan-panel';\nimport {Trans} from '../../../i18n/trans';\nimport {useInvoices} from '../requests/use-invoices';\nimport {FormattedDate} from '../../../i18n/formatted-date';\nimport {FormattedCurrency} from '../../../i18n/formatted-currency';\nimport {Chip} from '../../../ui/forms/input-field/chip-field/chip';\nimport {OpenInNewIcon} from '../../../icons/material/OpenInNew';\nimport {Skeleton} from '../../../ui/skeleton/skeleton';\nimport {AnimatePresence, m} from 'framer-motion';\nimport {Invoice} from '../../invoice';\nimport {opacityAnimation} from '../../../ui/animation/opacity-animation';\nimport {useSettings} from '../../../core/settings/use-settings';\n\nexport function InvoiceHistoryPanel() {\n  const {user} = useBillingUser();\n  const query = useInvoices(user?.id!);\n  if (!user) return null;\n\n  const invoices = query.data?.invoices;\n\n  return (\n    <BillingPlanPanel title={<Trans message=\"Payment history\" />}>\n      <div className=\"max-w-[464px]\">\n        <AnimatePresence initial={false} mode=\"wait\">\n          {query.isLoading ? (\n            <LoadingSkeleton key=\"loading-skeleton\" />\n          ) : (\n            <InvoiceList key=\"invoices\" invoices={invoices} />\n          )}\n        </AnimatePresence>\n      </div>\n    </BillingPlanPanel>\n  );\n}\n\ninterface InvoiceListProps {\n  invoices?: Invoice[];\n}\nfunction InvoiceList({invoices}: InvoiceListProps) {\n  const {base_url} = useSettings();\n  return (\n    <m.div {...opacityAnimation}>\n      {!invoices?.length ? (\n        <div className=\"text-muted italic\">\n          <Trans message=\"No invoices yet\" />\n        </div>\n      ) : undefined}\n      {invoices?.map(invoice => (\n        <div\n          className=\"whitespace-nowrap text-base flex items-center justify-between gap-10 mb-14\"\n          key={invoice.id}\n        >\n          <a\n            href={`${base_url}/billing/invoices/${invoice.uuid}`}\n            target=\"_blank\"\n            className=\"flex items-center gap-8 hover:underline\"\n            rel=\"noreferrer\"\n          >\n            <FormattedDate date={invoice.created_at} />\n            <OpenInNewIcon size=\"xs\" />\n          </a>\n          {invoice.subscription.price && (\n            <div>\n              <FormattedCurrency\n                value={invoice.subscription.price.amount}\n                currency={invoice.subscription.price.currency}\n              />\n            </div>\n          )}\n          <Chip\n            size=\"xs\"\n            color={invoice.paid ? 'positive' : 'danger'}\n            radius=\"rounded\"\n          >\n            {invoice.paid ? (\n              <Trans message=\"Paid\" />\n            ) : (\n              <Trans message=\"Unpaid\" />\n            )}\n          </Chip>\n          <div>{invoice.subscription.product?.name}</div>\n        </div>\n      ))}\n    </m.div>\n  );\n}\n\nfunction LoadingSkeleton() {\n  return (\n    <m.div {...opacityAnimation}>\n      <Skeleton className=\"mb-14\" />\n      <Skeleton className=\"mb-14\" />\n      <Skeleton className=\"mb-14\" />\n      <Skeleton className=\"mb-14\" />\n      <Skeleton />\n    </m.div>\n  );\n}\n","import {useBillingUser} from './use-billing-user';\nimport {CancelledPlanPanel} from './panels/cancelled-plan-panel';\nimport {ActivePlanPanel} from './panels/active-plan-panel';\nimport {PaymentMethodPanel} from './panels/payment-method-panel';\nimport {InvoiceHistoryPanel} from './panels/invoice-history-panel';\n\nexport function BillingPage() {\n  const {subscription} = useBillingUser();\n  if (!subscription?.price || !subscription?.product) return null;\n  console.log(\"OKOK\");\n\n  const planPanel = subscription.ends_at ? (\n    <CancelledPlanPanel />\n  ) : (\n    <ActivePlanPanel />\n  );\n\n  return (\n    <div>\n      {planPanel}\n      <PaymentMethodPanel />\n      <InvoiceHistoryPanel />\n    </div>\n  );\n}\n","import {Route, Routes} from 'react-router-dom';\nimport React from 'react';\nimport {SubscribedRoute} from '../../auth/guards/subscribed-route';\nimport {BillingPageLayout} from './billing-page-layout';\nimport {ChangePaymentMethodLayout} from './change-payment-method/change-payment-method-layout';\nimport {ChangePaymentMethodPage} from './change-payment-method/change-payment-method-page';\nimport {ChangePaymentMethodDone} from './change-payment-method/change-payment-method-done';\nimport {ChangePlanPage} from './change-plan-page';\nimport {ConfirmPlanChangePage} from './confirm-plan-change-page';\nimport {ConfirmPlanCancellationPage} from './confirm-plan-cancellation-page';\nimport {ConfirmPlanRenewalPage} from './confirm-plan-renewal-page';\nimport {BillingPage} from './billing-page';\n\nexport default function BillingPageRoutes() {\n  return (\n    <Routes>\n      <Route\n        path=\"/\"\n        element={\n          <SubscribedRoute>\n            <BillingPageLayout />\n          </SubscribedRoute>\n        }\n      >\n        <Route index element={<BillingPage />} />\n        <Route\n          path=\"change-payment-method\"\n          element={<ChangePaymentMethodLayout />}\n        >\n          <Route index element={<ChangePaymentMethodPage />} />\n          <Route path=\"done\" element={<ChangePaymentMethodDone />} />\n        </Route>\n        <Route path=\"change-plan\" element={<ChangePlanPage />} />\n        <Route\n          path=\"change-plan/:productId/:priceId/confirm\"\n          element={<ConfirmPlanChangePage />}\n        />\n        <Route path=\"cancel\" element={<ConfirmPlanCancellationPage />} />\n        <Route path=\"renew\" element={<ConfirmPlanRenewalPage />} />\n      </Route>\n    </Routes>\n  );\n}\n"],"names":["SubscribedRoute","children","isSubscribed","useAuth","Outlet","jsx","Navigate","BillingPageLayout","user","query","useUser","Fragment","StaticPageTitle","Trans","Navbar","jsxs","ProgressCircle","Footer","previousUrl","ChangePaymentMethodLayout","navigate","useNavigate","Breadcrumb","BreadcrumbItem","ChangePaymentMethodPage","base_url","useSettings","StripeElementsForm","Button","Link","useBillingUser","_b","_a","_c","invalidateBillingUserQuery","queryClient","ChangePaymentMethodDone","stripe_public_key","params","useSearchParams","clientSecret","messageConfig","setMessageConfig","useState","stripeInitiated","useRef","useEffect","loadStripe","stripe","getRedirectMessageConfig","setupIntent","changeDefaultPaymentMethod","BillingRedirectMessage","status","redirectMessageDefaults","message","paymentMethodId","apiClient","BillingPlanPanel","title","findBestPrice","token","prices","match","findMonthlyPrice","findYearlyPrice","price","UpsellLabel","memo","products","upsellPercentage","calcHighestUpsellPercentage","decreases","product","monthly","yearly","monthlyAmount","yearlyAmount","savingsPercentage","BillingCycleRadio","selectedCycle","onChange","radioGroupProps","RadioGroup","Radio","e","ChangePlanPage","AnimatePresence","PlanList","useProducts","setSelectedCycle","PlanSkeleton","plan","createElement","m","opacityAnimation","FormattedPrice","FeatureList","ContinueButton","CheckIcon","feature","subscription","Skeleton","useChangeSubscriptionPlan","trans","useTrans","useMutation","props","changePlan","toast","err","showHttpErrorToast","subscriptionId","other","r","ConfirmPlanChangePage","productId","priceId","useParams","newProduct","p","newPrice","newDate","FormattedDate","ConfirmPlanCancellationPage","cancelSubscription","useCancelSubscription","renewDate","handleSubscriptionCancel","ConfirmPlanRenewalPage","resumeSubscription","useResumeSubscription","endDate","handleResumeSubscription","CancelledPlanPanel","endingDate","Chip","CalendarTodayIcon","ActivePlanPanel","PastDueMessage","SectionHelper","PaymentMethodPanel","PaymentMethod","CardPaymentMethod","methodClassName","linkClassName","EditIcon","Endpoint","useInvoices","userId","useQuery","fetchInvoices","response","InvoiceHistoryPanel","invoices","LoadingSkeleton","InvoiceList","invoice","OpenInNewIcon","FormattedCurrency","BillingPage","planPanel","BillingPageRoutes","Routes","Route"],"mappings":"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"}