{"version":3,"mappings":"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","names":["Endpoint","useAdminReport","payload","useQuery","fetchAnalyticsReport","keepPreviousData","types","dateRange","params","apiClient","response","ChartLayout","props","title","description","children","className","contentIsFlex","contentClassName","contentRef","minHeight","jsxs","clsx","jsx","ChartLoadingIndicator","ProgressCircle","Trans","LazyChart","lazy","BaseChart","isLoading","Suspense","formatReportData","report","localeCode","shareFirstDatasetLabels","firstDatasetLabels","dataset","datasetIndex","data","datasetItem","itemIndex","label","generateDatasetLabels","datum","granularity","locale","generateTimeLabels","isoDate","isoEndDate","date","parseAbsoluteToLocal","endDate","getFormatter","memoize","options","DateFormatter","a","b","shallowEqual","primaryColor","getBootstrapData","ChartColors","LineChartOptions","LineChart","useSelectedLocale","formattedData","useMemo","i","PolarAreaChartOptions","PolarAreaChart","d","c","BarChart","direction","individualBarColors","isHorizontal","loaderUrl","useGoogleGeoChart","placeholderRef","country","onCountrySelected","trans","useTrans","analytics","useSettings","apiKey","selectedTheme","useThemeSelector","geoChartRef","useRef","regionInteractivity","drawGoogleChart","useCallback","seedData","location","message","backgroundColor","themeValueToHex","_a","_b","initGoogleGeoChart","lazyLoader","useEffect","InfoDialogTriggerIcon","createSvgIcon","InfoDialogTrigger","body","dialogSize","DialogTrigger","IconButton","Dialog","DialogHeader","DialogBody","FormattedCountryName","memo","countryCode","regionNames","formattedName","Fragment","GeoChart","metricData","layoutProps","initialData","InfoTrigger","Button","ArrowBackIcon","AdminReportPageColGap","rowClassName","VisitorsReportCharts","totalViews","FormattedNumber","AdminHeaderReport","ReportItem","icon","isValidElement","cloneElement","IconEl","createSvgIconFromTree","AnimatePresence","m","opacityAnimation","Skeleton","FormattedValue","TrendingIndicator","FormattedBytes","percentage","calculatePercentage","TrendingUpIcon","TrendingFlatIcon","TrendingDownIcon","percentageChange","previousValue","currentValue","monthDayFormat","ReportDateSelector","value","onChange","disabled","compactOnMobile","enableCompare","isMobile","useIsMobileMediaQuery","DateRangeIcon","FormattedDateTimeRange","DateFormatPresets","DateSelectorDialog","state","useDateRangePickerState","compareHasInitialValue","compareState","DateRangeComparePresets","DateRangeDialog","AdminReportPage","setDateRange","useState","DateRangePresets","StaticPageTitle"],"sources":["../../../common/resources/client/admin/analytics/use-admin-report.ts","../../../common/resources/client/charts/chart-layout.tsx","../../../common/resources/client/charts/chart-loading-indicator.tsx","../../../common/resources/client/charts/base-chart.tsx","../../../common/resources/client/charts/data/format-report-data.ts","../../../common/resources/client/charts/chart-colors.tsx","../../../common/resources/client/charts/line-chart.tsx","../../../common/resources/client/charts/polar-area-chart.tsx","../../../common/resources/client/charts/bar-chart.tsx","../../../common/resources/client/admin/analytics/geo-chart/use-google-geo-chart.ts","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon.tsx","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger.tsx","../../../common/resources/client/i18n/formatted-country-name.tsx","../../../common/resources/client/admin/analytics/geo-chart/geo-chart.tsx","../../../common/resources/client/admin/analytics/visitors-report-charts.tsx","../../../common/resources/client/admin/analytics/admin-header-report.tsx","../../../common/resources/client/admin/analytics/report-date-selector.tsx","../../../common/resources/client/admin/analytics/admin-report-page.tsx"],"sourcesContent":["import {keepPreviousData, useQuery} from '@tanstack/react-query';\r\nimport {BackendResponse} from '../../http/backend-response/backend-response';\r\nimport {apiClient} from '../../http/query-client';\r\nimport {VisitorsReportData} from './visitors-report-data';\r\nimport {IconTree} from '../../icons/create-svg-icon';\r\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {ReactElement} from 'react';\r\nimport {SvgIconProps} from '@common/icons/svg-icon';\r\n\r\nconst Endpoint = 'admin/reports';\r\n\r\nexport interface HeaderDatum {\r\n  icon: IconTree[] | ReactElement<SvgIconProps>;\r\n  name: string;\r\n  type?: 'number' | 'fileSize' | 'percentage';\r\n  currentValue: number;\r\n  previousValue?: number;\r\n  percentageChange?: number;\r\n}\r\n\r\ninterface FetchAnalyticsReportResponse extends BackendResponse {\r\n  visitorsReport: VisitorsReportData;\r\n  headerReport: HeaderDatum[];\r\n}\r\n\r\ninterface Payload {\r\n  types?: ('visitors' | 'header')[];\r\n  dateRange?: DateRangeValue;\r\n}\r\nexport function useAdminReport(payload: Payload = {}) {\r\n  return useQuery({\r\n    queryKey: [Endpoint, payload],\r\n    queryFn: () => fetchAnalyticsReport(payload),\r\n    placeholderData: keepPreviousData,\r\n  });\r\n}\r\n\r\nfunction fetchAnalyticsReport({\r\n  types,\r\n  dateRange,\r\n}: Payload): Promise<FetchAnalyticsReportResponse> {\r\n  const params: Record<string, any> = {};\r\n  if (types) {\r\n    params.types = types.join(',');\r\n  }\r\n  if (dateRange) {\r\n    params.startDate = dateRange.start.toAbsoluteString();\r\n    params.endDate = dateRange.end.toAbsoluteString();\r\n    params.timezone = dateRange.start.timeZone;\r\n  }\r\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\r\n}\r\n","import {ReactNode, Ref} from 'react';\r\nimport clsx from 'clsx';\r\n\r\nexport interface ChartLayoutProps {\r\n  title: ReactNode;\r\n  description?: ReactNode;\r\n  className?: string;\r\n  children: ReactNode;\r\n  contentIsFlex?: boolean;\r\n  contentClassName?: string;\r\n  minHeight?: string;\r\n  contentRef?: Ref<HTMLDivElement>;\r\n  isLoading?: boolean;\r\n}\r\nexport function ChartLayout(props: ChartLayoutProps) {\r\n  const {\r\n    title,\r\n    description,\r\n    children,\r\n    className,\r\n    contentIsFlex = true,\r\n    contentClassName,\r\n    contentRef,\r\n    minHeight = 'min-h-440',\r\n  } = props;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        'rounded-panel flex h-full flex-auto flex-col border bg',\r\n        minHeight,\r\n        className,\r\n      )}\r\n    >\r\n      <div className=\"flex flex-shrink-0 items-center justify-between p-14 text-xs\">\r\n        <div className=\"text-sm font-semibold\">{title}</div>\r\n        {description && <div className=\"text-muted\">{description}</div>}\r\n      </div>\r\n      <div\r\n        ref={contentRef}\r\n        className={clsx(\r\n          'relative p-14',\r\n          contentIsFlex && 'flex flex-auto items-center justify-center',\r\n          contentClassName,\r\n        )}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {ProgressCircle} from '@common/ui/progress/progress-circle';\r\nimport {Trans} from '@common/i18n/trans';\r\n\r\nexport function ChartLoadingIndicator() {\r\n  return (\r\n    <div className=\"flex items-center gap-10 text-sm absolute mx-auto\">\r\n      <ProgressCircle isIndeterminate size=\"sm\" />\r\n      <Trans message=\"Chart loading\" />\r\n    </div>\r\n  );\r\n}\r\n","import type {ChartData, ChartOptions, ChartType} from 'chart.js';\r\nimport {lazy, Suspense} from 'react';\r\nimport {ChartLayout, ChartLayoutProps} from './chart-layout';\r\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\r\n\r\nconst LazyChart = lazy(() => import('./lazy-chart'));\r\n\r\nexport interface BaseChartProps<Type extends ChartType = ChartType>\r\n  extends Omit<ChartLayoutProps, 'children'> {\r\n  type: Type;\r\n  data: ChartData<Type, unknown>;\r\n  options?: ChartOptions<Type>;\r\n  hideLegend?: boolean;\r\n}\r\nexport function BaseChart<Type extends ChartType = ChartType>(\r\n  props: BaseChartProps<Type>\r\n) {\r\n  const {title, description, className, contentRef, isLoading} = props;\r\n\r\n  return (\r\n    <ChartLayout\r\n      title={title}\r\n      description={description}\r\n      className={className}\r\n      contentRef={contentRef}\r\n    >\r\n      <Suspense fallback={<ChartLoadingIndicator />}>\r\n        <LazyChart {...props} />\r\n        {isLoading && <ChartLoadingIndicator />}\r\n      </Suspense>\r\n    </ChartLayout>\r\n  );\r\n}\r\n","import {DateFormatter, parseAbsoluteToLocal} from '@internationalized/date';\r\nimport memoize from 'nano-memoize';\r\nimport {ChartType} from 'chart.js';\r\nimport {\r\n  FormattedDatasetItem,\r\n  FormattedReportData,\r\n} from './formatted-dataset-item';\r\nimport {\r\n  DatasetItem,\r\n  RangedDatasetGranularity,\r\n  ReportMetric,\r\n} from '../../admin/analytics/report-metric';\r\nimport {shallowEqual} from '../../utils/shallow-equal';\r\n\r\ninterface Options {\r\n  localeCode: string;\r\n  shareFirstDatasetLabels?: boolean;\r\n}\r\n\r\ntype FormattedDatasetLabels = Omit<FormattedDatasetItem, 'value'>;\r\n\r\nexport function formatReportData(\r\n  report: ReportMetric<DatasetItem> | undefined,\r\n  {localeCode = 'en', shareFirstDatasetLabels = true}: Options,\r\n): FormattedReportData {\r\n  if (!report) return {datasets: []};\r\n\r\n  const firstDatasetLabels: FormattedDatasetLabels[] = [];\r\n\r\n  return {\r\n    ...report,\r\n    datasets: report.datasets.map((dataset, datasetIndex) => {\r\n      const data = dataset.data.map((datasetItem, itemIndex) => {\r\n        let label: FormattedDatasetLabels;\r\n        // when there are multiple datasets, we'll need to use labels from the first dataset, so charts are\r\n        // overlapped over one another, otherwise they will be side by side, if labels in all datasets are not identical.\r\n        if (datasetIndex === 0 || !shareFirstDatasetLabels) {\r\n          label = generateDatasetLabels(\r\n            datasetItem,\r\n            report.granularity,\r\n            localeCode,\r\n          );\r\n          firstDatasetLabels[itemIndex] = label;\r\n        } else {\r\n          label = firstDatasetLabels[itemIndex];\r\n        }\r\n        return {\r\n          ...label,\r\n          value: datasetItem.value,\r\n        };\r\n      });\r\n\r\n      return {...dataset, data};\r\n    }),\r\n  };\r\n}\r\n\r\nfunction generateDatasetLabels<T extends ChartType = ChartType>(\r\n  datum: DatasetItem,\r\n  granularity: RangedDatasetGranularity | undefined,\r\n  locale: string,\r\n): FormattedDatasetLabels {\r\n  if (datum.label) {\r\n    return {label: datum.label};\r\n  }\r\n\r\n  if (!datum.date) {\r\n    return {label: ''};\r\n  }\r\n\r\n  return generateTimeLabels(datum, granularity, locale);\r\n}\r\n\r\nfunction generateTimeLabels(\r\n  {date: isoDate, endDate: isoEndDate}: DatasetItem,\r\n  granularity: RangedDatasetGranularity | undefined = 'day',\r\n  locale: string,\r\n): Omit<FormattedDatasetItem, 'value'> {\r\n  const date = parseAbsoluteToLocal(isoDate!).toDate();\r\n  const endDate = isoEndDate ? parseAbsoluteToLocal(isoEndDate).toDate() : null;\r\n\r\n  switch (granularity) {\r\n    case 'minute':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          second: '2-digit',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          second: '2-digit',\r\n        }).format(date),\r\n      };\r\n    case 'hour':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          month: 'short',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        }).format(date),\r\n      };\r\n    case 'day':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          day: '2-digit',\r\n          weekday: 'short',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          weekday: 'short',\r\n          month: 'short',\r\n        }).format(date),\r\n      };\r\n    case 'week':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          month: 'short',\r\n          day: '2-digit',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          month: 'long',\r\n          year: 'numeric',\r\n        }).formatRange(date, endDate as Date),\r\n      };\r\n    case 'month':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          month: 'short',\r\n          year: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          month: 'long',\r\n          year: 'numeric',\r\n        }).format(date),\r\n      };\r\n    case 'year':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          year: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          year: 'numeric',\r\n        }).format(date),\r\n      };\r\n  }\r\n}\r\n\r\nconst getFormatter = memoize(\r\n  (locale, options: Intl.DateTimeFormatOptions) => {\r\n    return new DateFormatter(locale, options);\r\n  },\r\n  {\r\n    equals: (a, b) => {\r\n      return shallowEqual(a, b);\r\n    },\r\n    callTimeout: undefined as any,\r\n  },\r\n);\r\n","import {getBootstrapData} from '@common/core/bootstrap-data/use-backend-bootstrap-data';\r\n\r\nconst primaryColor = getBootstrapData().themes.all[0].values['--be-primary'];\r\nexport const ChartColors = [\r\n  [\r\n    `rgb(${primaryColor.replaceAll(' ', ',')})`,\r\n    `rgba(${primaryColor.replaceAll(' ', ',')},0.2)`,\r\n  ],\r\n  ['rgb(255,112,67)', 'rgb(255,112,67,0.2)'],\r\n  ['rgb(255,167,38)', 'rgb(255,167,38,0.2)'],\r\n  ['rgb(141,110,99)', 'rgb(141,110,99,0.2)'],\r\n  ['rgb(102,187,106)', 'rgba(102,187,106,0.2)'],\r\n  ['rgb(92,107,192)', 'rgb(92,107,192,0.2)'],\r\n];\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {useSelectedLocale} from '../i18n/selected-locale';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport clsx from 'clsx';\r\n\r\nconst LineChartOptions: ChartOptions<'line'> = {\r\n  parsing: {\r\n    xAxisKey: 'label',\r\n    yAxisKey: 'value',\r\n  },\r\n  datasets: {\r\n    line: {\r\n      fill: 'origin',\r\n      tension: 0.1,\r\n      pointBorderWidth: 4,\r\n      pointHitRadius: 10,\r\n    },\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      intersect: false,\r\n      mode: 'index',\r\n    },\r\n  },\r\n};\r\n\r\ninterface LineChartProps extends Omit<BaseChartProps<'line'>, 'type' | 'data'> {\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function LineChart({data, className, ...props}: LineChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'line', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: ChartColors[i][1],\r\n        borderColor: ChartColors[i][0],\r\n        pointBackgroundColor: ChartColors[i][0],\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode]);\r\n\r\n  return (\r\n    <BaseChart\r\n      {...props}\r\n      className={clsx(className, 'min-w-500')}\r\n      data={formattedData}\r\n      type=\"line\"\r\n      options={LineChartOptions}\r\n    />\r\n  );\r\n}\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {useSelectedLocale} from '../i18n/selected-locale';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport clsx from 'clsx';\r\n\r\nconst PolarAreaChartOptions: ChartOptions<'polarArea'> = {\r\n  parsing: {\r\n    key: 'value',\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      intersect: true,\r\n    },\r\n  },\r\n};\r\n\r\ninterface PolarAreaChartProps\r\n  extends Omit<BaseChartProps<'polarArea'>, 'type' | 'data'> {\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function PolarAreaChart({\r\n  data,\r\n  className,\r\n  ...props\r\n}: PolarAreaChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'polarArea', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.labels = formattedData.datasets[0]?.data.map(d => d.label);\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: ChartColors.map(c => c[1]),\r\n        borderColor: ChartColors.map(c => c[0]),\r\n        borderWidth: 2,\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode]);\r\n\r\n  return (\r\n    <BaseChart\r\n      type=\"polarArea\"\r\n      data={formattedData}\r\n      options={PolarAreaChartOptions}\r\n      className={clsx(className, 'min-w-500')}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {useSelectedLocale} from '../i18n/selected-locale';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport clsx from 'clsx';\r\n\r\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\r\n  direction?: 'horizontal' | 'vertical';\r\n  individualBarColors?: boolean;\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function BarChart({\r\n  data,\r\n  direction = 'vertical',\r\n  individualBarColors = false,\r\n  className,\r\n  ...props\r\n}: BarChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: individualBarColors\r\n          ? ChartColors.map(c => c[1])\r\n          : ChartColors[i][1],\r\n        borderColor: individualBarColors\r\n          ? ChartColors.map(c => c[0])\r\n          : ChartColors[i][0],\r\n        borderWidth: 2,\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode, individualBarColors]);\r\n\r\n  const isHorizontal = direction === 'horizontal';\r\n  const options: ChartOptions<'bar'> = useMemo(() => {\r\n    return {\r\n      indexAxis: isHorizontal ? 'y' : 'x',\r\n      parsing: {\r\n        xAxisKey: isHorizontal ? 'value' : 'label',\r\n        yAxisKey: isHorizontal ? 'label' : 'value',\r\n      },\r\n    };\r\n  }, [isHorizontal]);\r\n\r\n  return (\r\n    <BaseChart\r\n      type=\"bar\"\r\n      className={clsx(className, 'min-w-500')}\r\n      data={formattedData}\r\n      options={options}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import lazyLoader from '../../../utils/http/lazy-loader';\r\nimport {useSettings} from '@common/core/settings/use-settings';\r\nimport {RefObject, useCallback, useEffect, useRef} from 'react';\r\nimport {useThemeSelector} from '@common/ui/themes/theme-selector-context';\r\nimport {themeValueToHex} from '@common/ui/themes/utils/theme-value-to-hex';\r\nimport {useTrans} from '@common/i18n/use-trans';\r\nimport {message} from '@common/i18n/message';\r\nimport {LocationDatasetItem} from '@common/admin/analytics/report-metric';\r\n\r\nconst loaderUrl = 'https://www.gstatic.com/charts/loader.js';\r\n\r\ninterface UseGoogleGeoChartProps {\r\n  placeholderRef: RefObject<HTMLDivElement>;\r\n  data: LocationDatasetItem[];\r\n  onCountrySelected?: (countryCode: string) => void;\r\n  country?: string;\r\n}\r\nexport function useGoogleGeoChart({\r\n  placeholderRef,\r\n  data,\r\n  country,\r\n  onCountrySelected,\r\n}: UseGoogleGeoChartProps) {\r\n  const {trans} = useTrans();\r\n  const {analytics} = useSettings();\r\n  const apiKey = analytics?.gchart_api_key;\r\n  const {selectedTheme} = useThemeSelector();\r\n  const geoChartRef = useRef<google.visualization.GeoChart>();\r\n  // only allow selecting countries, not cities\r\n  const regionInteractivity = !!onCountrySelected && !country;\r\n  const drawGoogleChart = useCallback(() => {\r\n    if (typeof google === 'undefined') return;\r\n\r\n    const seedData = data.map(location => [location.label, location.value]);\r\n    seedData.unshift([\r\n      country ? trans(message('City')) : trans(message('Country')),\r\n      trans(message('Clicks')),\r\n    ]);\r\n\r\n    const backgroundColor = `${themeValueToHex(\r\n      selectedTheme.values['--be-paper'],\r\n    )}`;\r\n    const chartColor = `${themeValueToHex(\r\n      selectedTheme.values['--be-primary'],\r\n    )}`;\r\n\r\n    const options: google.visualization.GeoChartOptions = {\r\n      colorAxis: {colors: [chartColor]},\r\n      backgroundColor,\r\n      region: country ? country.toUpperCase() : undefined,\r\n      resolution: country ? 'provinces' : 'countries',\r\n      displayMode: country ? 'markers' : 'regions',\r\n      enableRegionInteractivity: regionInteractivity,\r\n    };\r\n\r\n    if (\r\n      !geoChartRef.current &&\r\n      placeholderRef.current &&\r\n      google?.visualization?.GeoChart\r\n    ) {\r\n      geoChartRef.current = new google.visualization.GeoChart(\r\n        placeholderRef.current,\r\n      );\r\n    }\r\n    geoChartRef.current?.draw(\r\n      google.visualization.arrayToDataTable(seedData),\r\n      options,\r\n    );\r\n  }, [\r\n    selectedTheme,\r\n    data,\r\n    placeholderRef,\r\n    trans,\r\n    country,\r\n    regionInteractivity,\r\n  ]);\r\n\r\n  const initGoogleGeoChart = useCallback(async () => {\r\n    if (lazyLoader.isLoadingOrLoaded(loaderUrl)) return;\r\n    await lazyLoader.loadAsset(loaderUrl, {type: 'js', id: 'google-charts-js'});\r\n    await google.charts.load('current', {\r\n      packages: ['geochart'],\r\n      mapsApiKey: apiKey,\r\n    });\r\n    drawGoogleChart();\r\n  }, [apiKey, drawGoogleChart]);\r\n\r\n  useEffect(() => {\r\n    if (geoChartRef.current && onCountrySelected) {\r\n      google.visualization.events.addListener(\r\n        geoChartRef.current,\r\n        'regionClick',\r\n        (a: {region: string}) => onCountrySelected?.(a.region),\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (geoChartRef.current) {\r\n        google.visualization.events.removeAllListeners(geoChartRef.current);\r\n      }\r\n    };\r\n    // this will correctly run when geochart instance is set on ref\r\n  }, [onCountrySelected, geoChartRef.current]);\r\n\r\n  // on component load: load chart library then draw, otherwise just draw\r\n  useEffect(() => {\r\n    initGoogleGeoChart();\r\n  }, [initGoogleGeoChart]);\r\n\r\n  // redraw chart if data or theme changes\r\n  useEffect(() => {\r\n    drawGoogleChart();\r\n  }, [selectedTheme, drawGoogleChart, data]);\r\n\r\n  return {drawGoogleChart};\r\n}\r\n","import {createSvgIcon} from '@common/icons/create-svg-icon';\r\n\r\nexport const InfoDialogTriggerIcon = createSvgIcon(\r\n  <path d=\"M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />,\r\n  'InfoDialogTrigger'\r\n);\r\n","import {IconButton} from '@common/ui/buttons/icon-button';\r\nimport {InfoDialogTriggerIcon} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon';\r\nimport {Dialog, DialogSize} from '@common/ui/overlays/dialog/dialog';\r\nimport {DialogHeader} from '@common/ui/overlays/dialog/dialog-header';\r\nimport {DialogBody} from '@common/ui/overlays/dialog/dialog-body';\r\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\r\nimport React, {ReactNode} from 'react';\r\nimport clsx from 'clsx';\r\n\r\ninterface InfoDialogTriggerProps {\r\n  title?: ReactNode;\r\n  body: ReactNode;\r\n  dialogSize?: DialogSize;\r\n  className?: string;\r\n}\r\nexport function InfoDialogTrigger({\r\n  title,\r\n  body,\r\n  dialogSize = 'sm',\r\n  className,\r\n}: InfoDialogTriggerProps) {\r\n  return (\r\n    <DialogTrigger type=\"popover\" triggerOnHover>\r\n      <IconButton\r\n        className={clsx('ml-4 text-muted opacity-70', className)}\r\n        iconSize=\"xs\"\r\n        size=\"2xs\"\r\n      >\r\n        <InfoDialogTriggerIcon viewBox=\"0 0 16 16\" />\r\n      </IconButton>\r\n      <Dialog size={dialogSize}>\r\n        {title && (\r\n          <DialogHeader padding=\"px-18 pt-12\" size=\"md\" hideDismissButton>\r\n            {title}\r\n          </DialogHeader>\r\n        )}\r\n        <DialogBody>{body}</DialogBody>\r\n      </Dialog>\r\n    </DialogTrigger>\r\n  );\r\n}\r\n","import {useSelectedLocale} from '@common/i18n/selected-locale';\r\nimport {Fragment, memo} from 'react';\r\n\r\ninterface Props {\r\n  code: string;\r\n}\r\nexport const FormattedCountryName = memo(({code: countryCode}: Props) => {\r\n  const {localeCode} = useSelectedLocale();\r\n  const regionNames = new Intl.DisplayNames([localeCode], {type: 'region'});\r\n  let formattedName: string | undefined;\r\n\r\n  try {\r\n    formattedName = regionNames.of(countryCode.toUpperCase());\r\n  } catch (e) {}\r\n\r\n  return <Fragment>{formattedName}</Fragment>;\r\n});\r\n","import {\r\n  LocationDatasetItem,\r\n  ReportMetric,\r\n} from '@common/admin/analytics/report-metric';\r\nimport React, {useMemo, useRef} from 'react';\r\nimport {useGoogleGeoChart} from './use-google-geo-chart';\r\nimport {ChartLayout, ChartLayoutProps} from '@common/charts/chart-layout';\r\nimport {Trans} from '@common/i18n/trans';\r\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\r\nimport {Button} from '@common/ui/buttons/button';\r\nimport {ArrowBackIcon} from '@common/icons/material/ArrowBack';\r\nimport clsx from 'clsx';\r\nimport {InfoDialogTrigger} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\r\nimport {FormattedCountryName} from '@common/i18n/formatted-country-name';\r\n\r\ninterface GeoChartData extends Partial<ChartLayoutProps> {\r\n  data?: ReportMetric<LocationDatasetItem>;\r\n  onCountrySelected?: (countryCode: string | undefined) => void;\r\n  country?: string;\r\n}\r\nexport function GeoChart({\r\n  data: metricData,\r\n  isLoading,\r\n  onCountrySelected,\r\n  country,\r\n  ...layoutProps\r\n}: GeoChartData) {\r\n  const placeholderRef = useRef<HTMLDivElement>(null);\r\n  const regionInteractivity = !!onCountrySelected;\r\n\r\n  // memo data to avoid redrawing chart on rerender\r\n  const initialData = metricData?.datasets[0].data;\r\n  const data = useMemo(() => {\r\n    return initialData || [];\r\n  }, [initialData]);\r\n  useGoogleGeoChart({placeholderRef, data, country, onCountrySelected});\r\n\r\n  return (\r\n    <ChartLayout\r\n      {...layoutProps}\r\n      className=\"min-w-500\"\r\n      title={\r\n        <div className=\"flex items-center\">\r\n          <Trans message=\"Top Locations\" />\r\n          {country ? (\r\n            <span className=\"pl-4\">\r\n              ({<FormattedCountryName code={country} />})\r\n            </span>\r\n          ) : null}\r\n          {regionInteractivity && <InfoTrigger />}\r\n        </div>\r\n      }\r\n      contentIsFlex={isLoading}\r\n    >\r\n      {isLoading && <ChartLoadingIndicator />}\r\n      <div className=\"flex gap-24\">\r\n        <div\r\n          ref={placeholderRef}\r\n          className=\"flex-auto w-[480px] min-h-[340px]\"\r\n        />\r\n        <div className=\"w-[170px]\">\r\n          <div className=\"text-sm max-h-[340px] w-full flex-initial overflow-y-auto\">\r\n            {data.map(location => (\r\n              <div\r\n                key={location.label}\r\n                className={clsx(\r\n                  'flex items-center gap-4 mb-4',\r\n                  regionInteractivity && 'cursor-pointer hover:underline'\r\n                )}\r\n                role={regionInteractivity ? 'button' : undefined}\r\n                onClick={() => {\r\n                  onCountrySelected?.(location.code);\r\n                }}\r\n              >\r\n                <div className=\"max-w-110 whitespace-nowrap overflow-hidden overflow-ellipsis\">\r\n                  {location.label}\r\n                </div>\r\n                <div>({location.percentage})%</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {country && (\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              className=\"mt-14\"\r\n              startIcon={<ArrowBackIcon />}\r\n              onClick={() => {\r\n                onCountrySelected?.(undefined);\r\n              }}\r\n            >\r\n              <Trans message=\"Back to countries\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </ChartLayout>\r\n  );\r\n}\r\n\r\nfunction InfoTrigger() {\r\n  return (\r\n    <InfoDialogTrigger\r\n      title={<Trans message=\"Zooming in\" />}\r\n      body={\r\n        <Trans message=\"Click on a country inside the map or country list to zoom in and see city data for that country.\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React, {Fragment} from 'react';\r\nimport {LineChart} from '@common/charts/line-chart';\r\nimport {Trans} from '@common/i18n/trans';\r\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\r\nimport {BarChart} from '@common/charts/bar-chart';\r\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\r\nimport {FormattedNumber} from '@common/i18n/formatted-number';\r\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\r\n\r\nexport const AdminReportPageColGap = 'gap-12 md:gap-24 mb-12 md:mb-24';\r\nconst rowClassName = `flex flex-col md:flex-row md:items-center overflow-x-auto ${AdminReportPageColGap}`;\r\n\r\ninterface AdminReportChartsProps {\r\n  report?: VisitorsReportData;\r\n  isLoading: boolean;\r\n}\r\nexport function VisitorsReportCharts({\r\n  report,\r\n  isLoading,\r\n}: AdminReportChartsProps) {\r\n  const totalViews = report?.pageViews.total;\r\n  return (\r\n    <Fragment>\r\n      <div className={rowClassName}>\r\n        <LineChart\r\n          isLoading={isLoading}\r\n          className=\"flex-auto\"\r\n          data={report?.pageViews}\r\n          title={<Trans message=\"Pageviews\" />}\r\n          description={\r\n            totalViews ? (\r\n              <Trans\r\n                message=\":count total views\"\r\n                values={{count: <FormattedNumber value={totalViews} />}}\r\n              />\r\n            ) : null\r\n          }\r\n        />\r\n        <PolarAreaChart\r\n          isLoading={isLoading}\r\n          data={report?.devices}\r\n          title={<Trans message=\"Top devices\" />}\r\n        />\r\n      </div>\r\n      <div className={rowClassName}>\r\n        <BarChart\r\n          isLoading={isLoading}\r\n          data={report?.browsers}\r\n          className=\"flex-auto md:w-1/3\"\r\n          direction=\"horizontal\"\r\n          individualBarColors\r\n          hideLegend\r\n          title={<Trans message=\"Top browsers\" />}\r\n        />\r\n        <GeoChart\r\n          isLoading={isLoading}\r\n          className=\"flex-auto\"\r\n          data={report?.locations}\r\n          title={<Trans message=\"Top locations\" />}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n","import {HeaderDatum} from '@common/admin/analytics/use-admin-report';\r\nimport React, {\r\n  cloneElement,\r\n  Fragment,\r\n  isValidElement,\r\n  ReactElement,\r\n} from 'react';\r\nimport {TrendingUpIcon} from '@common/icons/material/TrendingUp';\r\nimport {TrendingDownIcon} from '@common/icons/material/TrendingDown';\r\nimport {createSvgIconFromTree} from '@common/icons/create-svg-icon';\r\nimport {AdminReportPageColGap} from '@common/admin/analytics/visitors-report-charts';\r\nimport {FormattedNumber} from '@common/i18n/formatted-number';\r\nimport {FormattedBytes} from '@common/uploads/formatted-bytes';\r\nimport {TrendingFlatIcon} from '@common/icons/material/TrendingFlat';\r\nimport {AnimatePresence, m} from 'framer-motion';\r\nimport {opacityAnimation} from '@common/ui/animation/opacity-animation';\r\nimport {Skeleton} from '@common/ui/skeleton/skeleton';\r\n\r\ninterface AdminHeaderReportProps {\r\n  report?: HeaderDatum[];\r\n  isLoading?: boolean;\r\n}\r\nexport function AdminHeaderReport({report, isLoading}: AdminHeaderReportProps) {\r\n  return (\r\n    <div\r\n      className={`flex h-[97px] flex-shrink-0 items-center overflow-x-auto ${AdminReportPageColGap}`}\r\n    >\r\n      {report?.map(datum => (\r\n        <ReportItem key={datum.name} datum={datum} isLoading={isLoading} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ValueMetricItemProps {\r\n  datum: HeaderDatum;\r\n  isLoading?: boolean;\r\n}\r\nfunction ReportItem({datum, isLoading = false}: ValueMetricItemProps) {\r\n  let icon;\r\n  if (isValidElement(datum.icon)) {\r\n    icon = cloneElement(datum.icon, {size: 'lg'});\r\n  } else {\r\n    const IconEl = createSvgIconFromTree(datum.icon);\r\n    icon = <IconEl size=\"lg\" />;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      key={datum.name}\r\n      className=\"rounded-panel flex h-full flex-auto items-center gap-18 whitespace-nowrap border p-20\"\r\n    >\r\n      <div className=\"flex-shrink-0 rounded-lg bg-primary-light/20 p-10 text-primary\">\r\n        {icon}\r\n      </div>\r\n      <div className=\"flex-auto\">\r\n        <div className=\"flex items-center justify-between gap-20\">\r\n          <div className=\"text-lg font-bold text-main\">\r\n            <AnimatePresence initial={false} mode=\"wait\">\r\n              {isLoading ? (\r\n                <m.div key=\"skeleton\" {...opacityAnimation}>\r\n                  <Skeleton className=\"min-w-24\" />\r\n                </m.div>\r\n              ) : (\r\n                <m.div key=\"value\" {...opacityAnimation}>\r\n                  <FormattedValue datum={datum} />\r\n                </m.div>\r\n              )}\r\n            </AnimatePresence>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center justify-between gap-20\">\r\n          <h2 className=\"text-sm text-muted\">{datum.name}</h2>\r\n          {(datum.percentageChange != null || datum.previousValue != null) && (\r\n            <div className=\"flex items-center gap-10\">\r\n              <TrendingIndicator datum={datum} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface FormattedValueProps {\r\n  datum: HeaderDatum;\r\n}\r\nfunction FormattedValue({datum}: FormattedValueProps) {\r\n  switch (datum.type) {\r\n    case 'fileSize':\r\n      return <FormattedBytes bytes={datum.currentValue} />;\r\n    case 'percentage':\r\n      return (\r\n        <FormattedNumber\r\n          value={datum.currentValue}\r\n          style=\"percent\"\r\n          maximumFractionDigits={1}\r\n        />\r\n      );\r\n    default:\r\n      return <FormattedNumber value={datum.currentValue} />;\r\n  }\r\n}\r\n\r\ninterface TrendingIndicatorProps {\r\n  datum: HeaderDatum;\r\n}\r\nfunction TrendingIndicator({datum}: TrendingIndicatorProps) {\r\n  const percentage = calculatePercentage(datum);\r\n  let icon: ReactElement;\r\n  if (percentage > 0) {\r\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\r\n  } else if (percentage === 0) {\r\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\r\n  } else {\r\n    icon = <TrendingDownIcon className=\"text-danger\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {icon}\r\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nfunction calculatePercentage({\r\n  percentageChange,\r\n  previousValue,\r\n  currentValue,\r\n}: HeaderDatum) {\r\n  if (\r\n    percentageChange != null ||\r\n    previousValue == null ||\r\n    currentValue == null\r\n  ) {\r\n    return percentageChange ?? 0;\r\n  }\r\n\r\n  if (previousValue === 0) {\r\n    return 100;\r\n  }\r\n\r\n  return Math.round(((currentValue - previousValue) / previousValue) * 100);\r\n}\r\n","import {useDateRangePickerState} from '@common/ui/forms/input-field/date/date-range-picker/use-date-range-picker-state';\r\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\r\nimport {Button} from '@common/ui/buttons/button';\r\nimport {DateRangeIcon} from '@common/icons/material/DateRange';\r\nimport {FormattedDateTimeRange} from '@common/i18n/formatted-date-time-range';\r\nimport {DateRangeDialog} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-dialog';\r\nimport React from 'react';\r\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {useIsMobileMediaQuery} from '@common/utils/hooks/is-mobile-media-query';\r\nimport {DateFormatPresets} from '@common/i18n/formatted-date';\r\nimport {DateRangeComparePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-compare-presets';\r\nimport {Granularity} from '@common/ui/forms/input-field/date/date-picker/use-date-picker-state';\r\n\r\nconst monthDayFormat: Intl.DateTimeFormatOptions = {\r\n  month: 'short',\r\n  day: '2-digit',\r\n};\r\n\r\ninterface ReportDataSelectorProps {\r\n  value: DateRangeValue;\r\n  disabled?: boolean;\r\n  onChange: (value: DateRangeValue) => void;\r\n  compactOnMobile?: boolean;\r\n  enableCompare?: boolean;\r\n  granularity?: Granularity;\r\n}\r\nexport function ReportDateSelector({\r\n  value,\r\n  onChange,\r\n  disabled,\r\n  compactOnMobile = true,\r\n  enableCompare = false,\r\n  granularity = 'minute',\r\n}: ReportDataSelectorProps) {\r\n  const isMobile = useIsMobileMediaQuery();\r\n  return (\r\n    <DialogTrigger\r\n      type=\"popover\"\r\n      onClose={value => {\r\n        if (value) {\r\n          onChange(value);\r\n        }\r\n      }}\r\n    >\r\n      <Button\r\n        variant=\"outline\"\r\n        color=\"chip\"\r\n        endIcon={<DateRangeIcon />}\r\n        disabled={disabled}\r\n      >\r\n        <FormattedDateTimeRange\r\n          start={value.start}\r\n          end={value.end}\r\n          options={\r\n            isMobile && compactOnMobile\r\n              ? monthDayFormat\r\n              : DateFormatPresets.short\r\n          }\r\n        />\r\n      </Button>\r\n      <DateSelectorDialog\r\n        value={value}\r\n        enableCompare={enableCompare}\r\n        granularity={granularity}\r\n      />\r\n    </DialogTrigger>\r\n  );\r\n}\r\n\r\ninterface DateSelectorDialogProps {\r\n  value: DateRangeValue;\r\n  enableCompare: boolean;\r\n  granularity: Granularity;\r\n}\r\nfunction DateSelectorDialog({\r\n  value,\r\n  enableCompare,\r\n  granularity,\r\n}: DateSelectorDialogProps) {\r\n  const isMobile = useIsMobileMediaQuery();\r\n  const state = useDateRangePickerState({\r\n    granularity,\r\n    defaultValue: {\r\n      start: value.start,\r\n      end: value.end,\r\n      preset: value.preset,\r\n    },\r\n    closeDialogOnSelection: false,\r\n  });\r\n  const compareHasInitialValue = !!value.compareStart && !!value.compareEnd;\r\n  const compareState = useDateRangePickerState({\r\n    granularity,\r\n    defaultValue: compareHasInitialValue\r\n      ? {\r\n          start: value.compareStart,\r\n          end: value.compareEnd,\r\n          preset: value.comparePreset,\r\n        }\r\n      : DateRangeComparePresets[0].getRangeValue(state.selectedValue),\r\n  });\r\n  return (\r\n    <DateRangeDialog\r\n      state={state}\r\n      compareState={enableCompare ? compareState : undefined}\r\n      compareVisibleDefault={compareHasInitialValue}\r\n      showInlineDatePickerField={!isMobile}\r\n    />\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useAdminReport} from './use-admin-report';\r\nimport {Trans} from '../../i18n/trans';\r\nimport {StaticPageTitle} from '../../seo/static-page-title';\r\nimport {AdminHeaderReport} from '@common/admin/analytics/admin-header-report';\r\nimport {VisitorsReportCharts} from '@common/admin/analytics/visitors-report-charts';\r\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {DateRangePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-presets';\r\nimport {ReportDateSelector} from '@common/admin/analytics/report-date-selector';\r\n\r\nexport default function AdminReportPage() {\r\n  const [dateRange, setDateRange] = useState<DateRangeValue>(() => {\r\n    // This week\r\n    return DateRangePresets[2].getRangeValue();\r\n  });\r\n  const {isLoading, data} = useAdminReport({dateRange});\r\n  const title = <Trans message=\"Visitors report\" />;\r\n\r\n  return (\r\n    <div className=\"min-h-full gap-12 overflow-x-hidden p-12 md:gap-24 md:p-24\">\r\n      <div className=\"mb-24 items-center justify-between gap-24 md:flex\">\r\n        <StaticPageTitle>{title}</StaticPageTitle>\r\n        <h1 className=\"mb-24 text-3xl font-light md:mb-0\">{title}</h1>\r\n        <ReportDateSelector value={dateRange} onChange={setDateRange} />\r\n      </div>\r\n      <AdminHeaderReport report={data?.headerReport} />\r\n      <VisitorsReportCharts\r\n        report={data?.visitorsReport}\r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"file":"assets/admin-report-page-5fa93335.js"}